/*
 * HR API
 * <a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>
 *
 * The version of the OpenAPI document: 2
 * Contact: hrapi@iris.co.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PublicHolidayModel;
import com.konfigthis.client.model.PublicHolidayQueryModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PublicHolidaysApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PublicHolidaysApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PublicHolidaysApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getLocationListByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/publicholidays/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=1",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=1",
            "application/json;odata.metadata=minimal; version=1",
            "application/json;odata.metadata=full;odata.streaming=true; version=1",
            "application/json;odata.metadata=full;odata.streaming=false; version=1",
            "application/json;odata.metadata=full; version=1",
            "application/json;odata.metadata=none;odata.streaming=true; version=1",
            "application/json;odata.metadata=none;odata.streaming=false; version=1",
            "application/json;odata.metadata=none; version=1",
            "application/json;odata.streaming=true; version=1",
            "application/json;odata.streaming=false; version=1",
            "application/json; version=1",
            "application/xml; version=1",
            "application/prs.odatatestxx-odata; version=1",
            "text/plain; version=1",
            "text/json; version=1"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationListByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLocationListById(Async)");
        }

        return getLocationListByIdCall(id, _callback);

    }


    private ApiResponse<PublicHolidayModel> getLocationListByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getLocationListByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PublicHolidayModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLocationListByIdAsync(String id, final ApiCallback<PublicHolidayModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationListByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PublicHolidayModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLocationListByIdRequestBuilder {
        private final String id;

        private GetLocationListByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getLocationListById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLocationListByIdCall(id, _callback);
        }


        /**
         * Execute getLocationListById request
         * @return PublicHolidayModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PublicHolidayModel execute() throws ApiException {
            ApiResponse<PublicHolidayModel> localVarResp = getLocationListByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLocationListById request with HTTP info returned
         * @return ApiResponse&lt;PublicHolidayModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicHolidayModel> executeWithHttpInfo() throws ApiException {
            return getLocationListByIdWithHttpInfo(id);
        }

        /**
         * Execute getLocationListById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicHolidayModel> _callback) throws ApiException {
            return getLocationListByIdAsync(id, _callback);
        }
    }

    /**
     * Gets a location based Public Holiday list by ID.
     * 
     * @param id Public Holiday ID. (required)
     * @return GetLocationListByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetLocationListByIdRequestBuilder getLocationListById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetLocationListByIdRequestBuilder(id);
    }
    private okhttp3.Call getLocationsCall(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/publicholidays";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=1",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=1",
            "application/json;odata.metadata=minimal; version=1",
            "application/json;odata.metadata=full;odata.streaming=true; version=1",
            "application/json;odata.metadata=full;odata.streaming=false; version=1",
            "application/json;odata.metadata=full; version=1",
            "application/json;odata.metadata=none;odata.streaming=true; version=1",
            "application/json;odata.metadata=none;odata.streaming=false; version=1",
            "application/json;odata.metadata=none; version=1",
            "application/json;odata.streaming=true; version=1",
            "application/json;odata.streaming=false; version=1",
            "application/json; version=1",
            "application/xml; version=1",
            "application/prs.odatatestxx-odata; version=1",
            "text/plain; version=1",
            "text/json; version=1"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationsValidateBeforeCall(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        return getLocationsCall($top, $skip, $filter, $select, $orderby, $count, _callback);

    }


    private ApiResponse<PublicHolidayQueryModel> getLocationsWithHttpInfo(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = getLocationsValidateBeforeCall($top, $skip, $filter, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<PublicHolidayQueryModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLocationsAsync(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count, final ApiCallback<PublicHolidayQueryModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationsValidateBeforeCall($top, $skip, $filter, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<PublicHolidayQueryModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLocationsRequestBuilder {
        private Integer $top;
        private Integer $skip;
        private String $filter;
        private List<String> $select;
        private String $orderby;
        private Boolean $count;

        private GetLocationsRequestBuilder() {
        }

        /**
         * Set $top
         * @param $top Show only the first n items, maximum of 250, see [Paging - Top](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
         * @return GetLocationsRequestBuilder
         */
        public GetLocationsRequestBuilder $top(Integer $top) {
            this.$top = $top;
            return this;
        }
        
        /**
         * Set $skip
         * @param $skip Skip the first n items, see [Paging - Skip](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
         * @return GetLocationsRequestBuilder
         */
        public GetLocationsRequestBuilder $skip(Integer $skip) {
            this.$skip = $skip;
            return this;
        }
        
        /**
         * Set $filter
         * @param $filter Filter items by property values, see [Filtering](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
         * @return GetLocationsRequestBuilder
         */
        public GetLocationsRequestBuilder $filter(String $filter) {
            this.$filter = $filter;
            return this;
        }
        
        /**
         * Set $select
         * @param $select Select properties to be returned, see [Select](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
         * @return GetLocationsRequestBuilder
         */
        public GetLocationsRequestBuilder $select(List<String> $select) {
            this.$select = $select;
            return this;
        }
        
        /**
         * Set $orderby
         * @param $orderby Order items by property values, see [Sorting](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
         * @return GetLocationsRequestBuilder
         */
        public GetLocationsRequestBuilder $orderby(String $orderby) {
            this.$orderby = $orderby;
            return this;
        }
        
        /**
         * Set $count
         * @param $count Include count of items, see [Count](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
         * @return GetLocationsRequestBuilder
         */
        public GetLocationsRequestBuilder $count(Boolean $count) {
            this.$count = $count;
            return this;
        }
        
        /**
         * Build call for getLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLocationsCall($top, $skip, $filter, $select, $orderby, $count, _callback);
        }


        /**
         * Execute getLocations request
         * @return PublicHolidayQueryModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PublicHolidayQueryModel execute() throws ApiException {
            ApiResponse<PublicHolidayQueryModel> localVarResp = getLocationsWithHttpInfo($top, $skip, $filter, $select, $orderby, $count);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLocations request with HTTP info returned
         * @return ApiResponse&lt;PublicHolidayQueryModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicHolidayQueryModel> executeWithHttpInfo() throws ApiException {
            return getLocationsWithHttpInfo($top, $skip, $filter, $select, $orderby, $count);
        }

        /**
         * Execute getLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicHolidayQueryModel> _callback) throws ApiException {
            return getLocationsAsync($top, $skip, $filter, $select, $orderby, $count, _callback);
        }
    }

    /**
     * Gets a set of Public Holidays with locations.
     * 
     * @return GetLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetLocationsRequestBuilder getLocations() throws IllegalArgumentException {
        return new GetLocationsRequestBuilder();
    }
}
