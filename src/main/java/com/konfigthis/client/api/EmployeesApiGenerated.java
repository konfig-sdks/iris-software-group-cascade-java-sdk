/*
 * HR API
 * <a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>
 *
 * The version of the OpenAPI document: 2
 * Contact: hrapi@iris.co.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.CreateEmployeeCommand;
import com.konfigthis.client.model.Email;
import com.konfigthis.client.model.EmployeeModel;
import com.konfigthis.client.model.EmployeeQueryModel;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Phone;
import com.konfigthis.client.model.UpdateEmployeeCommand;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEmployeeCall(CreateEmployeeCommand createEmployeeCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEmployeeCommand;

        // create path and map variables
        String localVarPath = "/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/plain; version=2",
            "text/json; version=2"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/json; version=2",
            "application/*+json; version=2"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEmployeeValidateBeforeCall(CreateEmployeeCommand createEmployeeCommand, final ApiCallback _callback) throws ApiException {
        return createNewEmployeeCall(createEmployeeCommand, _callback);

    }


    private ApiResponse<String> createNewEmployeeWithHttpInfo(CreateEmployeeCommand createEmployeeCommand) throws ApiException {
        okhttp3.Call localVarCall = createNewEmployeeValidateBeforeCall(createEmployeeCommand, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewEmployeeAsync(CreateEmployeeCommand createEmployeeCommand, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEmployeeValidateBeforeCall(createEmployeeCommand, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewEmployeeRequestBuilder {
        private String displayId;
        private String titleHonorific;
        private String firstName;
        private String knownAs;
        private String otherName;
        private String lastName;
        private String costCentre;
        private String workingStatus;
        private Boolean isManager;
        private String nationalInsuranceNumber;
        private String payrollId;
        private String taxCode;
        private Boolean includeInPayroll;
        private OffsetDateTime employmentStartDate;
        private OffsetDateTime employmentLeftDate;
        private OffsetDateTime continuousServiceDate;
        private OffsetDateTime dateOfBirth;
        private OffsetDateTime lastWorkingDate;
        private String gender;
        private String ethnicity;
        private String nationality;
        private String religion;
        private String leaverReason;
        private String maritalStatus;
        private List<Phone> phones;
        private List<Email> emails;
        private List<Address> addresses;
        private String genderIdentity;
        private String windowsUsername;

        private CreateNewEmployeeRequestBuilder() {
        }

        /**
         * Set displayId
         * @param displayId The Display ID of the Employee. &lt;br /&gt;  If provided must be unqiue, If null then it will automatically be generated. &lt;br /&gt;  Cascade Source: [Employee].[DisplayEmployeeId] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder displayId(String displayId) {
            this.displayId = displayId;
            return this;
        }
        
        /**
         * Set titleHonorific
         * @param titleHonorific The Title of the Employee. E.g. Mr, Mrs, Miss. &lt;br /&gt;  Cascade Source: [Employee].[Title] translated through the TITLE system list. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder titleHonorific(String titleHonorific) {
            this.titleHonorific = titleHonorific;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The First Name of the Employee. &lt;br /&gt;  Required. &lt;br /&gt;  Cascade Source: [Employee].[Forename] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set knownAs
         * @param knownAs The name the Employee is commonly known as. &lt;br /&gt;  Cascade Source: [Employee].[KnownAs] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder knownAs(String knownAs) {
            this.knownAs = knownAs;
            return this;
        }
        
        /**
         * Set otherName
         * @param otherName Any other name that the Employee has. &lt;br /&gt;  Cascade Source: [Employee].[OtherName] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder otherName(String otherName) {
            this.otherName = otherName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The Last Name, Surname or Family Name of the Employee. &lt;br /&gt;  Required. &lt;br /&gt;  Cascade Source: [Employee].[Surname] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set costCentre
         * @param costCentre The Cost Centre assigned to the Employee. &lt;br /&gt;  Cascade Source: [Employee].[CostCentre] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder costCentre(String costCentre) {
            this.costCentre = costCentre;
            return this;
        }
        
        /**
         * Set workingStatus
         * @param workingStatus The Status of the Employee E.g. On Holiday, Sick. &lt;br /&gt;  Automatically Calculated. &lt;br /&gt;  Cascade Source: [Sysview_Employee_Status].[StatusDescription] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder workingStatus(String workingStatus) {
            this.workingStatus = workingStatus;
            return this;
        }
        
        /**
         * Set isManager
         * @param isManager Indicates if the Employee is a Manager. &lt;br /&gt;  True if any other Employee&#39;s active &lt;see cref&#x3D;\\\&quot;T:Iris.Api.Hr.Employee.Domain.Entities.V1.Job\\\&quot;&gt;Job&lt;/see&gt; has this Employee as their Line Manager. &lt;br /&gt;  Automaticaly Calculated. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder isManager(Boolean isManager) {
            this.isManager = isManager;
            return this;
        }
        
        /**
         * Set nationalInsuranceNumber
         * @param nationalInsuranceNumber The National Insurance Number of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[NationalInsuranceNo] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder nationalInsuranceNumber(String nationalInsuranceNumber) {
            this.nationalInsuranceNumber = nationalInsuranceNumber;
            return this;
        }
        
        /**
         * Set payrollId
         * @param payrollId The Payroll ID of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[PayrollId] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder payrollId(String payrollId) {
            this.payrollId = payrollId;
            return this;
        }
        
        /**
         * Set taxCode
         * @param taxCode The Tax Code of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[TaxCode] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder taxCode(String taxCode) {
            this.taxCode = taxCode;
            return this;
        }
        
        /**
         * Set includeInPayroll
         * @param includeInPayroll Indicates if the Employee should be included in Payroll. &lt;br /&gt;  Cascade Source: [Employee].[IncludeInPayroll] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder includeInPayroll(Boolean includeInPayroll) {
            this.includeInPayroll = includeInPayroll;
            return this;
        }
        
        /**
         * Set employmentStartDate
         * @param employmentStartDate The date the Employee started with their current Employer. &lt;br /&gt;  Cascade Source: [Employee].[EmployeeStartDate] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder employmentStartDate(OffsetDateTime employmentStartDate) {
            this.employmentStartDate = employmentStartDate;
            return this;
        }
        
        /**
         * Set employmentLeftDate
         * @param employmentLeftDate The date the Employee left their current Employer. &lt;br /&gt;  Cascade Source: [Employee].[EmployementLeftDate] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder employmentLeftDate(OffsetDateTime employmentLeftDate) {
            this.employmentLeftDate = employmentLeftDate;
            return this;
        }
        
        /**
         * Set continuousServiceDate
         * @param continuousServiceDate The date the Employee&#39;s continuous service should be applied from. &lt;br /&gt;  Cascade Source: [Employee].[ContServiceDate] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder continuousServiceDate(OffsetDateTime continuousServiceDate) {
            this.continuousServiceDate = continuousServiceDate;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth The Date of Birth of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[DateOfBirth] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder dateOfBirth(OffsetDateTime dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set lastWorkingDate
         * @param lastWorkingDate The date of the last working date of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[LeaverLastWorkDate] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder lastWorkingDate(OffsetDateTime lastWorkingDate) {
            this.lastWorkingDate = lastWorkingDate;
            return this;
        }
        
        /**
         * Set gender
         * @param gender The Gender of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[Sex] translated through the GENDER system list. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set ethnicity
         * @param ethnicity The Ethnicity of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[EthnicOrigin] translated through the ETHNICTORIGIN system list. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder ethnicity(String ethnicity) {
            this.ethnicity = ethnicity;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality The Nationality of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[Nationality] translated through the NATIONALITY system list. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set religion
         * @param religion The Religion of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[Religion] transalated through the RELIGION system list. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder religion(String religion) {
            this.religion = religion;
            return this;
        }
        
        /**
         * Set leaverReason
         * @param leaverReason The reason for the Employee to Leave. &lt;br /&gt;  Cascade Source: [Employee].[LeaverReason] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder leaverReason(String leaverReason) {
            this.leaverReason = leaverReason;
            return this;
        }
        
        /**
         * Set maritalStatus
         * @param maritalStatus The marrital status of the Employee. &lt;br /&gt;  Cascade Source: [Employee.[MaritalStatus] translated through the MARITALSTATUS system list. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder maritalStatus(String maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set phones
         * @param phones The &lt;see cref&#x3D;\\\&quot;T:Iris.Api.Hr.Employee.Domain.Entities.V1.Phone\\\&quot;&gt;Phone Numbers&lt;/see&gt; belonging to the Employee. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder phones(List<Phone> phones) {
            this.phones = phones;
            return this;
        }
        
        /**
         * Set emails
         * @param emails The &lt;see cref&#x3D;\\\&quot;T:Iris.Api.Hr.Employee.Domain.Entities.V1.Email\\\&quot;&gt;Email Addresses&lt;/see&gt; belonging to the Employee. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder emails(List<Email> emails) {
            this.emails = emails;
            return this;
        }
        
        /**
         * Set addresses
         * @param addresses The &lt;see cref&#x3D;\\\&quot;T:Iris.Api.Hr.Employee.Domain.Entities.V1.Address\\\&quot;&gt;Addresses&lt;/see&gt; belonging to the Employee. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder addresses(List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }
        
        /**
         * Set genderIdentity
         * @param genderIdentity The Gender Identity of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[GenderIdentity] translated through the GenderIdentity system list. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder genderIdentity(String genderIdentity) {
            this.genderIdentity = genderIdentity;
            return this;
        }
        
        /**
         * Set windowsUsername
         * @param windowsUsername The Windows Username of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[WindowsUsername] (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder windowsUsername(String windowsUsername) {
            this.windowsUsername = windowsUsername;
            return this;
        }
        
        /**
         * Build call for createNewEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateEmployeeCommand createEmployeeCommand = buildBodyParams();
            return createNewEmployeeCall(createEmployeeCommand, _callback);
        }

        private CreateEmployeeCommand buildBodyParams() {
            CreateEmployeeCommand createEmployeeCommand = new CreateEmployeeCommand();
            createEmployeeCommand.displayId(this.displayId);
            createEmployeeCommand.titleHonorific(this.titleHonorific);
            createEmployeeCommand.firstName(this.firstName);
            createEmployeeCommand.knownAs(this.knownAs);
            createEmployeeCommand.otherName(this.otherName);
            createEmployeeCommand.lastName(this.lastName);
            createEmployeeCommand.costCentre(this.costCentre);
            createEmployeeCommand.workingStatus(this.workingStatus);
            createEmployeeCommand.isManager(this.isManager);
            createEmployeeCommand.nationalInsuranceNumber(this.nationalInsuranceNumber);
            createEmployeeCommand.payrollId(this.payrollId);
            createEmployeeCommand.taxCode(this.taxCode);
            createEmployeeCommand.includeInPayroll(this.includeInPayroll);
            createEmployeeCommand.employmentStartDate(this.employmentStartDate);
            createEmployeeCommand.employmentLeftDate(this.employmentLeftDate);
            createEmployeeCommand.continuousServiceDate(this.continuousServiceDate);
            createEmployeeCommand.dateOfBirth(this.dateOfBirth);
            createEmployeeCommand.lastWorkingDate(this.lastWorkingDate);
            createEmployeeCommand.gender(this.gender);
            createEmployeeCommand.ethnicity(this.ethnicity);
            createEmployeeCommand.nationality(this.nationality);
            createEmployeeCommand.religion(this.religion);
            createEmployeeCommand.leaverReason(this.leaverReason);
            createEmployeeCommand.maritalStatus(this.maritalStatus);
            createEmployeeCommand.phones(this.phones);
            createEmployeeCommand.emails(this.emails);
            createEmployeeCommand.addresses(this.addresses);
            createEmployeeCommand.genderIdentity(this.genderIdentity);
            createEmployeeCommand.windowsUsername(this.windowsUsername);
            return createEmployeeCommand;
        }

        /**
         * Execute createNewEmployee request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            CreateEmployeeCommand createEmployeeCommand = buildBodyParams();
            ApiResponse<String> localVarResp = createNewEmployeeWithHttpInfo(createEmployeeCommand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewEmployee request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            CreateEmployeeCommand createEmployeeCommand = buildBodyParams();
            return createNewEmployeeWithHttpInfo(createEmployeeCommand);
        }

        /**
         * Execute createNewEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            CreateEmployeeCommand createEmployeeCommand = buildBodyParams();
            return createNewEmployeeAsync(createEmployeeCommand, _callback);
        }
    }

    /**
     * Creates a new Employee.
     * 
     * @return CreateNewEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewEmployeeRequestBuilder createNewEmployee() throws IllegalArgumentException {
        return new CreateNewEmployeeRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/plain; version=2",
            "text/json; version=2"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<EmployeeModel> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmployeeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<EmployeeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmployeeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return EmployeeModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeModel execute() throws ApiException {
            ApiResponse<EmployeeModel> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;EmployeeModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeModel> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeModel> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Gets a single Employee referenced by ID.
     * 
     * @param id Employee ID. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getListCall(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/plain; version=2",
            "text/json; version=2"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        return getListCall($top, $skip, $filter, $select, $orderby, $count, _callback);

    }


    private ApiResponse<EmployeeQueryModel> getListWithHttpInfo(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall($top, $skip, $filter, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<EmployeeQueryModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count, final ApiCallback<EmployeeQueryModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall($top, $skip, $filter, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<EmployeeQueryModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private Integer $top;
        private Integer $skip;
        private String $filter;
        private List<String> $select;
        private String $orderby;
        private Boolean $count;

        private GetListRequestBuilder() {
        }

        /**
         * Set $top
         * @param $top Show only the first n items, maximum of 250, see [Paging - Top](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $top(Integer $top) {
            this.$top = $top;
            return this;
        }
        
        /**
         * Set $skip
         * @param $skip Skip the first n items, see [Paging - Skip](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $skip(Integer $skip) {
            this.$skip = $skip;
            return this;
        }
        
        /**
         * Set $filter
         * @param $filter Filter items by property values, see [Filtering](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $filter(String $filter) {
            this.$filter = $filter;
            return this;
        }
        
        /**
         * Set $select
         * @param $select Select properties to be returned, see [Select](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $select(List<String> $select) {
            this.$select = $select;
            return this;
        }
        
        /**
         * Set $orderby
         * @param $orderby Order items by property values, see [Sorting](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $orderby(String $orderby) {
            this.$orderby = $orderby;
            return this;
        }
        
        /**
         * Set $count
         * @param $count Include count of items, see [Count](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $count(Boolean $count) {
            this.$count = $count;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall($top, $skip, $filter, $select, $orderby, $count, _callback);
        }


        /**
         * Execute getList request
         * @return EmployeeQueryModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeQueryModel execute() throws ApiException {
            ApiResponse<EmployeeQueryModel> localVarResp = getListWithHttpInfo($top, $skip, $filter, $select, $orderby, $count);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;EmployeeQueryModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeQueryModel> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo($top, $skip, $filter, $select, $orderby, $count);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeQueryModel> _callback) throws ApiException {
            return getListAsync($top, $skip, $filter, $select, $orderby, $count, _callback);
        }
    }

    /**
     * Gets a list of Employees.
     * 
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call updateByIdCall(String id, UpdateEmployeeCommand updateEmployeeCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmployeeCommand;

        // create path and map variables
        String localVarPath = "/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/plain; version=2",
            "text/json; version=2"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/json; version=2",
            "application/*+json; version=2"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String id, UpdateEmployeeCommand updateEmployeeCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        return updateByIdCall(id, updateEmployeeCommand, _callback);

    }


    private ApiResponse<Void> updateByIdWithHttpInfo(String id, UpdateEmployeeCommand updateEmployeeCommand) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, updateEmployeeCommand, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdAsync(String id, UpdateEmployeeCommand updateEmployeeCommand, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, updateEmployeeCommand, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String id;
        private String displayId;
        private String titleHonorific;
        private String firstName;
        private String knownAs;
        private String otherName;
        private String lastName;
        private String costCentre;
        private String workingStatus;
        private Boolean isManager;
        private String nationalInsuranceNumber;
        private String payrollId;
        private String taxCode;
        private Boolean includeInPayroll;
        private OffsetDateTime employmentStartDate;
        private OffsetDateTime employmentLeftDate;
        private OffsetDateTime continuousServiceDate;
        private OffsetDateTime dateOfBirth;
        private OffsetDateTime lastWorkingDate;
        private String gender;
        private String ethnicity;
        private String nationality;
        private String religion;
        private String leaverReason;
        private String maritalStatus;
        private List<Phone> phones;
        private List<Email> emails;
        private List<Address> addresses;
        private String genderIdentity;
        private String windowsUsername;
        private String id;

        private UpdateByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set displayId
         * @param displayId The Display ID of the Employee. &lt;br /&gt;  If provided must be unqiue, If null then it will automatically be generated. &lt;br /&gt;  Cascade Source: [Employee].[DisplayEmployeeId] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder displayId(String displayId) {
            this.displayId = displayId;
            return this;
        }
        
        /**
         * Set titleHonorific
         * @param titleHonorific The Title of the Employee. E.g. Mr, Mrs, Miss. &lt;br /&gt;  Cascade Source: [Employee].[Title] translated through the TITLE system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder titleHonorific(String titleHonorific) {
            this.titleHonorific = titleHonorific;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The First Name of the Employee. &lt;br /&gt;  Required. &lt;br /&gt;  Cascade Source: [Employee].[Forename] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set knownAs
         * @param knownAs The name the Employee is commonly known as. &lt;br /&gt;  Cascade Source: [Employee].[KnownAs] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder knownAs(String knownAs) {
            this.knownAs = knownAs;
            return this;
        }
        
        /**
         * Set otherName
         * @param otherName Any other name that the Employee has. &lt;br /&gt;  Cascade Source: [Employee].[OtherName] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder otherName(String otherName) {
            this.otherName = otherName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The Last Name, Surname or Family Name of the Employee. &lt;br /&gt;  Required. &lt;br /&gt;  Cascade Source: [Employee].[Surname] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set costCentre
         * @param costCentre The Cost Centre assigned to the Employee. &lt;br /&gt;  Cascade Source: [Employee].[CostCentre] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder costCentre(String costCentre) {
            this.costCentre = costCentre;
            return this;
        }
        
        /**
         * Set workingStatus
         * @param workingStatus The Status of the Employee E.g. On Holiday, Sick. &lt;br /&gt;  Automatically Calculated. &lt;br /&gt;  Cascade Source: [Sysview_Employee_Status].[StatusDescription] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder workingStatus(String workingStatus) {
            this.workingStatus = workingStatus;
            return this;
        }
        
        /**
         * Set isManager
         * @param isManager Indicates if the Employee is a Manager. &lt;br /&gt;  True if any other Employee&#39;s active &lt;see cref&#x3D;\\\&quot;T:Iris.Api.Hr.Employee.Domain.Entities.V1.Job\\\&quot;&gt;Job&lt;/see&gt; has this Employee as their Line Manager. &lt;br /&gt;  Automaticaly Calculated. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder isManager(Boolean isManager) {
            this.isManager = isManager;
            return this;
        }
        
        /**
         * Set nationalInsuranceNumber
         * @param nationalInsuranceNumber The National Insurance Number of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[NationalInsuranceNo] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder nationalInsuranceNumber(String nationalInsuranceNumber) {
            this.nationalInsuranceNumber = nationalInsuranceNumber;
            return this;
        }
        
        /**
         * Set payrollId
         * @param payrollId The Payroll ID of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[PayrollId] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder payrollId(String payrollId) {
            this.payrollId = payrollId;
            return this;
        }
        
        /**
         * Set taxCode
         * @param taxCode The Tax Code of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[TaxCode] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder taxCode(String taxCode) {
            this.taxCode = taxCode;
            return this;
        }
        
        /**
         * Set includeInPayroll
         * @param includeInPayroll Indicates if the Employee should be included in Payroll. &lt;br /&gt;  Cascade Source: [Employee].[IncludeInPayroll] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder includeInPayroll(Boolean includeInPayroll) {
            this.includeInPayroll = includeInPayroll;
            return this;
        }
        
        /**
         * Set employmentStartDate
         * @param employmentStartDate The date the Employee started with their current Employer. &lt;br /&gt;  Cascade Source: [Employee].[EmployeeStartDate] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder employmentStartDate(OffsetDateTime employmentStartDate) {
            this.employmentStartDate = employmentStartDate;
            return this;
        }
        
        /**
         * Set employmentLeftDate
         * @param employmentLeftDate The date the Employee left their current Employer. &lt;br /&gt;  Cascade Source: [Employee].[EmployementLeftDate] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder employmentLeftDate(OffsetDateTime employmentLeftDate) {
            this.employmentLeftDate = employmentLeftDate;
            return this;
        }
        
        /**
         * Set continuousServiceDate
         * @param continuousServiceDate The date the Employee&#39;s continuous service should be applied from. &lt;br /&gt;  Cascade Source: [Employee].[ContServiceDate] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder continuousServiceDate(OffsetDateTime continuousServiceDate) {
            this.continuousServiceDate = continuousServiceDate;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth The Date of Birth of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[DateOfBirth] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder dateOfBirth(OffsetDateTime dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set lastWorkingDate
         * @param lastWorkingDate The date of the last working date of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[LeaverLastWorkDate] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder lastWorkingDate(OffsetDateTime lastWorkingDate) {
            this.lastWorkingDate = lastWorkingDate;
            return this;
        }
        
        /**
         * Set gender
         * @param gender The Gender of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[Sex] translated through the GENDER system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set ethnicity
         * @param ethnicity The Ethnicity of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[EthnicOrigin] translated through the ETHNICTORIGIN system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder ethnicity(String ethnicity) {
            this.ethnicity = ethnicity;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality The Nationality of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[Nationality] translated through the NATIONALITY system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set religion
         * @param religion The Religion of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[Religion] transalated through the RELIGION system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder religion(String religion) {
            this.religion = religion;
            return this;
        }
        
        /**
         * Set leaverReason
         * @param leaverReason The reason for the Employee to Leave. &lt;br /&gt;  Cascade Source: [Employee].[LeaverReason] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder leaverReason(String leaverReason) {
            this.leaverReason = leaverReason;
            return this;
        }
        
        /**
         * Set maritalStatus
         * @param maritalStatus The marrital status of the Employee. &lt;br /&gt;  Cascade Source: [Employee.[MaritalStatus] translated through the MARITALSTATUS system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder maritalStatus(String maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set phones
         * @param phones The &lt;see cref&#x3D;\\\&quot;T:Iris.Api.Hr.Employee.Domain.Entities.V1.Phone\\\&quot;&gt;Phone Numbers&lt;/see&gt; belonging to the Employee. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder phones(List<Phone> phones) {
            this.phones = phones;
            return this;
        }
        
        /**
         * Set emails
         * @param emails The &lt;see cref&#x3D;\\\&quot;T:Iris.Api.Hr.Employee.Domain.Entities.V1.Email\\\&quot;&gt;Email Addresses&lt;/see&gt; belonging to the Employee. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder emails(List<Email> emails) {
            this.emails = emails;
            return this;
        }
        
        /**
         * Set addresses
         * @param addresses The &lt;see cref&#x3D;\\\&quot;T:Iris.Api.Hr.Employee.Domain.Entities.V1.Address\\\&quot;&gt;Addresses&lt;/see&gt; belonging to the Employee. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder addresses(List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }
        
        /**
         * Set genderIdentity
         * @param genderIdentity The Gender Identity of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[GenderIdentity] translated through the GenderIdentity system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder genderIdentity(String genderIdentity) {
            this.genderIdentity = genderIdentity;
            return this;
        }
        
        /**
         * Set windowsUsername
         * @param windowsUsername The Windows Username of the Employee. &lt;br /&gt;  Cascade Source: [Employee].[WindowsUsername] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder windowsUsername(String windowsUsername) {
            this.windowsUsername = windowsUsername;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the Employee. &lt;br /&gt;  Must exist in the Employee Service. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateEmployeeCommand updateEmployeeCommand = buildBodyParams();
            return updateByIdCall(id, updateEmployeeCommand, _callback);
        }

        private UpdateEmployeeCommand buildBodyParams() {
            UpdateEmployeeCommand updateEmployeeCommand = new UpdateEmployeeCommand();
            updateEmployeeCommand.displayId(this.displayId);
            updateEmployeeCommand.titleHonorific(this.titleHonorific);
            updateEmployeeCommand.firstName(this.firstName);
            updateEmployeeCommand.knownAs(this.knownAs);
            updateEmployeeCommand.otherName(this.otherName);
            updateEmployeeCommand.lastName(this.lastName);
            updateEmployeeCommand.costCentre(this.costCentre);
            updateEmployeeCommand.workingStatus(this.workingStatus);
            updateEmployeeCommand.isManager(this.isManager);
            updateEmployeeCommand.nationalInsuranceNumber(this.nationalInsuranceNumber);
            updateEmployeeCommand.payrollId(this.payrollId);
            updateEmployeeCommand.taxCode(this.taxCode);
            updateEmployeeCommand.includeInPayroll(this.includeInPayroll);
            updateEmployeeCommand.employmentStartDate(this.employmentStartDate);
            updateEmployeeCommand.employmentLeftDate(this.employmentLeftDate);
            updateEmployeeCommand.continuousServiceDate(this.continuousServiceDate);
            updateEmployeeCommand.dateOfBirth(this.dateOfBirth);
            updateEmployeeCommand.lastWorkingDate(this.lastWorkingDate);
            updateEmployeeCommand.gender(this.gender);
            updateEmployeeCommand.ethnicity(this.ethnicity);
            updateEmployeeCommand.nationality(this.nationality);
            updateEmployeeCommand.religion(this.religion);
            updateEmployeeCommand.leaverReason(this.leaverReason);
            updateEmployeeCommand.maritalStatus(this.maritalStatus);
            updateEmployeeCommand.phones(this.phones);
            updateEmployeeCommand.emails(this.emails);
            updateEmployeeCommand.addresses(this.addresses);
            updateEmployeeCommand.genderIdentity(this.genderIdentity);
            updateEmployeeCommand.windowsUsername(this.windowsUsername);
            updateEmployeeCommand.id(this.id);
            return updateEmployeeCommand;
        }

        /**
         * Execute updateById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateEmployeeCommand updateEmployeeCommand = buildBodyParams();
            updateByIdWithHttpInfo(id, updateEmployeeCommand);
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateEmployeeCommand updateEmployeeCommand = buildBodyParams();
            return updateByIdWithHttpInfo(id, updateEmployeeCommand);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateEmployeeCommand updateEmployeeCommand = buildBodyParams();
            return updateByIdAsync(id, updateEmployeeCommand, _callback);
        }
    }

    /**
     * Update an Employee referenced by ID.
     * 
     * @param id The ID of Employee to update. (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateByIdRequestBuilder(id);
    }
}
