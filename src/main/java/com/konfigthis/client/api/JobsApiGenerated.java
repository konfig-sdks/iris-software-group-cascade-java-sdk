/*
 * HR API
 * <a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>
 *
 * The version of the OpenAPI document: 2
 * Contact: hrapi@iris.co.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateJobCommand;
import com.konfigthis.client.model.JobQueryModel;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UpdateJobCommand;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewJobCall(CreateJobCommand createJobCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createJobCommand;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/plain; version=2",
            "text/json; version=2"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/json; version=2",
            "application/*+json; version=2"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewJobValidateBeforeCall(CreateJobCommand createJobCommand, final ApiCallback _callback) throws ApiException {
        return createNewJobCall(createJobCommand, _callback);

    }


    private ApiResponse<String> createNewJobWithHttpInfo(CreateJobCommand createJobCommand) throws ApiException {
        okhttp3.Call localVarCall = createNewJobValidateBeforeCall(createJobCommand, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewJobAsync(CreateJobCommand createJobCommand, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewJobValidateBeforeCall(createJobCommand, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewJobRequestBuilder {
        private String jobTitle;
        private String classification;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private String workingCalendar;
        private String lineManagerId;
        private String hierarchyNodeId;
        private Boolean active;
        private Double salary;
        private String employeeId;
        private String contract;
        private String payFrequency;
        private String payBasis;
        private Double fullTimeEquivalent;
        private String changeReason;
        private OffsetDateTime nextIncrementDate;
        private String timesheetLocation;
        private String timesheetLunchDuration;
        private String expenseSubmissionFrequency;
        private String costCentre;
        private String jobFamily;
        private Boolean apprenticeUnder25;
        private OffsetDateTime apprenticeshipEndDate;
        private OffsetDateTime contractEndDate;
        private Double normalHours;
        private String realTimeInformationIrregularFrequency;
        private String noticePeriod;

        private CreateNewJobRequestBuilder() {
        }

        /**
         * Set jobTitle
         * @param jobTitle The title of the Job. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[JobTitle] (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set classification
         * @param classification The classification of the Job e.g. Technical, Professional, Managerial. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[Classification] translated through the JOBCLASSIFICATION system list. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder classification(String classification) {
            this.classification = classification;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The start date of the Job. &lt;br /&gt;  Required. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[SYS_EffectiveDate] (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The end date of the Job. &lt;br /&gt;  Automatically Calculated. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[SYS_CalculatedEndDate] (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set workingCalendar
         * @param workingCalendar The name of the working calendar of the Job. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[CalendarName] which comes from [ValidWorkingCalendar].[CalendarName] (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder workingCalendar(String workingCalendar) {
            this.workingCalendar = workingCalendar;
            return this;
        }
        
        /**
         * Set lineManagerId
         * @param lineManagerId The ID of the Employee that is the line manager for this Job. &lt;br /&gt;  Must exist in Employees Service. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[WorksForEmployeeId] (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder lineManagerId(String lineManagerId) {
            this.lineManagerId = lineManagerId;
            return this;
        }
        
        /**
         * Set hierarchyNodeId
         * @param hierarchyNodeId The ID of the Employee&#39;s Hierarchy node of the Job. &lt;br /&gt;  Must exist in Hierarchy Service. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder hierarchyNodeId(String hierarchyNodeId) {
            this.hierarchyNodeId = hierarchyNodeId;
            return this;
        }
        
        /**
         * Set active
         * @param active The Job is currently active. &lt;br /&gt;  Automatically Calculated. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[sys_ActiveJob] (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set salary
         * @param salary The salary of the Job. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[BasicPay] (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder salary(Double salary) {
            this.salary = salary;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId The ID of the Employee of the Job. &lt;br /&gt;  Must exist in Employee Service. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set contract
         * @param contract The contract of the Job e.g. Full Time, Part Time. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ContractType] translated through the EMPLOYMENTTYPES system list. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder contract(String contract) {
            this.contract = contract;
            return this;
        }
        
        /**
         * Set payFrequency
         * @param payFrequency How often the Job&#39;s salary will be paid e.g. Monthly, Weekly. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[PayFrequency] translated through the PAY FREQ system list. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder payFrequency(String payFrequency) {
            this.payFrequency = payFrequency;
            return this;
        }
        
        /**
         * Set payBasis
         * @param payBasis The unit of measurement the salary is specified against e.g. Yearly, Hourly. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[PayBasis] translated through the PAY BASIS system list. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder payBasis(String payBasis) {
            this.payBasis = payBasis;
            return this;
        }
        
        /**
         * Set fullTimeEquivalent
         * @param fullTimeEquivalent The full-time equivalent to a full time employee&#39;s hours e.g. 1 &#x3D; Full Time, 0.5 &#x3D; Half Hours. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[FTE]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder fullTimeEquivalent(Double fullTimeEquivalent) {
            this.fullTimeEquivalent = fullTimeEquivalent;
            return this;
        }
        
        /**
         * Set changeReason
         * @param changeReason The reason for the change. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[Reason]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder changeReason(String changeReason) {
            this.changeReason = changeReason;
            return this;
        }
        
        /**
         * Set nextIncrementDate
         * @param nextIncrementDate The next increment date.  &lt;br /&gt;  Cascade Source: [EmployeeJobs].[IncrementDate]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder nextIncrementDate(OffsetDateTime nextIncrementDate) {
            this.nextIncrementDate = nextIncrementDate;
            return this;
        }
        
        /**
         * Set timesheetLocation
         * @param timesheetLocation The timesheet location. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[TimesheetLocation]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder timesheetLocation(String timesheetLocation) {
            this.timesheetLocation = timesheetLocation;
            return this;
        }
        
        /**
         * Set timesheetLunchDuration
         * @param timesheetLunchDuration The time set lunch duration. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[LunchDuration]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder timesheetLunchDuration(String timesheetLunchDuration) {
            this.timesheetLunchDuration = timesheetLunchDuration;
            return this;
        }
        
        /**
         * Set expenseSubmissionFrequency
         * @param expenseSubmissionFrequency The expense submission frequency. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ExpenseSubmissionFrequency]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder expenseSubmissionFrequency(String expenseSubmissionFrequency) {
            this.expenseSubmissionFrequency = expenseSubmissionFrequency;
            return this;
        }
        
        /**
         * Set costCentre
         * @param costCentre The cost centre. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[CostCentre]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder costCentre(String costCentre) {
            this.costCentre = costCentre;
            return this;
        }
        
        /**
         * Set jobFamily
         * @param jobFamily The job family. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[JobFamily]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder jobFamily(String jobFamily) {
            this.jobFamily = jobFamily;
            return this;
        }
        
        /**
         * Set apprenticeUnder25
         * @param apprenticeUnder25 The flag to indicate if the employee is an apprentice under 25. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ApprenticeUnder25]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder apprenticeUnder25(Boolean apprenticeUnder25) {
            this.apprenticeUnder25 = apprenticeUnder25;
            return this;
        }
        
        /**
         * Set apprenticeshipEndDate
         * @param apprenticeshipEndDate The end date of the apprenticeship. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ApprenticeshipEndDate]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder apprenticeshipEndDate(OffsetDateTime apprenticeshipEndDate) {
            this.apprenticeshipEndDate = apprenticeshipEndDate;
            return this;
        }
        
        /**
         * Set contractEndDate
         * @param contractEndDate The end date of the contract. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ContractEndDate]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder contractEndDate(OffsetDateTime contractEndDate) {
            this.contractEndDate = contractEndDate;
            return this;
        }
        
        /**
         * Set normalHours
         * @param normalHours Normal hours. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[NormalHours]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder normalHours(Double normalHours) {
            this.normalHours = normalHours;
            return this;
        }
        
        /**
         * Set realTimeInformationIrregularFrequency
         * @param realTimeInformationIrregularFrequency The real time information of irregular frequency. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[RTIIrregularFrequency]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder realTimeInformationIrregularFrequency(String realTimeInformationIrregularFrequency) {
            this.realTimeInformationIrregularFrequency = realTimeInformationIrregularFrequency;
            return this;
        }
        
        /**
         * Set noticePeriod
         * @param noticePeriod The notice period. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[NoticePeriod]. (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder noticePeriod(String noticePeriod) {
            this.noticePeriod = noticePeriod;
            return this;
        }
        
        /**
         * Build call for createNewJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateJobCommand createJobCommand = buildBodyParams();
            return createNewJobCall(createJobCommand, _callback);
        }

        private CreateJobCommand buildBodyParams() {
            CreateJobCommand createJobCommand = new CreateJobCommand();
            createJobCommand.jobTitle(this.jobTitle);
            createJobCommand.classification(this.classification);
            createJobCommand.startDate(this.startDate);
            createJobCommand.endDate(this.endDate);
            createJobCommand.workingCalendar(this.workingCalendar);
            createJobCommand.lineManagerId(this.lineManagerId);
            createJobCommand.hierarchyNodeId(this.hierarchyNodeId);
            createJobCommand.active(this.active);
            createJobCommand.salary(this.salary);
            createJobCommand.employeeId(this.employeeId);
            createJobCommand.contract(this.contract);
            createJobCommand.payFrequency(this.payFrequency);
            createJobCommand.payBasis(this.payBasis);
            createJobCommand.fullTimeEquivalent(this.fullTimeEquivalent);
            createJobCommand.changeReason(this.changeReason);
            createJobCommand.nextIncrementDate(this.nextIncrementDate);
            createJobCommand.timesheetLocation(this.timesheetLocation);
            createJobCommand.timesheetLunchDuration(this.timesheetLunchDuration);
            createJobCommand.expenseSubmissionFrequency(this.expenseSubmissionFrequency);
            createJobCommand.costCentre(this.costCentre);
            createJobCommand.jobFamily(this.jobFamily);
            createJobCommand.apprenticeUnder25(this.apprenticeUnder25);
            createJobCommand.apprenticeshipEndDate(this.apprenticeshipEndDate);
            createJobCommand.contractEndDate(this.contractEndDate);
            createJobCommand.normalHours(this.normalHours);
            createJobCommand.realTimeInformationIrregularFrequency(this.realTimeInformationIrregularFrequency);
            createJobCommand.noticePeriod(this.noticePeriod);
            return createJobCommand;
        }

        /**
         * Execute createNewJob request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            CreateJobCommand createJobCommand = buildBodyParams();
            ApiResponse<String> localVarResp = createNewJobWithHttpInfo(createJobCommand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewJob request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            CreateJobCommand createJobCommand = buildBodyParams();
            return createNewJobWithHttpInfo(createJobCommand);
        }

        /**
         * Execute createNewJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            CreateJobCommand createJobCommand = buildBodyParams();
            return createNewJobAsync(createJobCommand, _callback);
        }
    }

    /**
     * Creates a new Job.
     * 
     * @return CreateNewJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewJobRequestBuilder createNewJob() throws IllegalArgumentException {
        return new CreateNewJobRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/plain; version=2",
            "text/json; version=2"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<String> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Gets a single Job referenced by an ID.
     * 
     * @param id Job ID. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getListCall(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/plain; version=2",
            "text/json; version=2"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        return getListCall($top, $skip, $filter, $select, $orderby, $count, _callback);

    }


    private ApiResponse<JobQueryModel> getListWithHttpInfo(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall($top, $skip, $filter, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<JobQueryModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(Integer $top, Integer $skip, String $filter, List<String> $select, String $orderby, Boolean $count, final ApiCallback<JobQueryModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall($top, $skip, $filter, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<JobQueryModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private Integer $top;
        private Integer $skip;
        private String $filter;
        private List<String> $select;
        private String $orderby;
        private Boolean $count;

        private GetListRequestBuilder() {
        }

        /**
         * Set $top
         * @param $top Show only the first n items, maximum of 250, see [Paging - Top](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $top(Integer $top) {
            this.$top = $top;
            return this;
        }
        
        /**
         * Set $skip
         * @param $skip Skip the first n items, see [Paging - Skip](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $skip(Integer $skip) {
            this.$skip = $skip;
            return this;
        }
        
        /**
         * Set $filter
         * @param $filter Filter items by property values, see [Filtering](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $filter(String $filter) {
            this.$filter = $filter;
            return this;
        }
        
        /**
         * Set $select
         * @param $select Select properties to be returned, see [Select](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $select(List<String> $select) {
            this.$select = $select;
            return this;
        }
        
        /**
         * Set $orderby
         * @param $orderby Order items by property values, see [Sorting](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $orderby(String $orderby) {
            this.$orderby = $orderby;
            return this;
        }
        
        /**
         * Set $count
         * @param $count Include count of items, see [Count](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder $count(Boolean $count) {
            this.$count = $count;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall($top, $skip, $filter, $select, $orderby, $count, _callback);
        }


        /**
         * Execute getList request
         * @return JobQueryModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JobQueryModel execute() throws ApiException {
            ApiResponse<JobQueryModel> localVarResp = getListWithHttpInfo($top, $skip, $filter, $select, $orderby, $count);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;JobQueryModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobQueryModel> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo($top, $skip, $filter, $select, $orderby, $count);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobQueryModel> _callback) throws ApiException {
            return getListAsync($top, $skip, $filter, $select, $orderby, $count, _callback);
        }
    }

    /**
     * Gets a list of Jobs.
     * 
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call updateByIdCall(String id, UpdateJobCommand updateJobCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateJobCommand;

        // create path and map variables
        String localVarPath = "/jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true; version=2",
            "application/json;odata.metadata=minimal;odata.streaming=false; version=2",
            "application/json;odata.metadata=minimal; version=2",
            "application/json;odata.metadata=full;odata.streaming=true; version=2",
            "application/json;odata.metadata=full;odata.streaming=false; version=2",
            "application/json;odata.metadata=full; version=2",
            "application/json;odata.metadata=none;odata.streaming=true; version=2",
            "application/json;odata.metadata=none;odata.streaming=false; version=2",
            "application/json;odata.metadata=none; version=2",
            "application/json;odata.streaming=true; version=2",
            "application/json;odata.streaming=false; version=2",
            "application/json; version=2",
            "application/xml; version=2",
            "application/prs.odatatestxx-odata; version=2",
            "text/json; version=2",
            "application/*+json; version=2"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String id, UpdateJobCommand updateJobCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        return updateByIdCall(id, updateJobCommand, _callback);

    }


    private ApiResponse<Void> updateByIdWithHttpInfo(String id, UpdateJobCommand updateJobCommand) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, updateJobCommand, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdAsync(String id, UpdateJobCommand updateJobCommand, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, updateJobCommand, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String id;
        private String jobTitle;
        private String classification;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private String workingCalendar;
        private String lineManagerId;
        private String hierarchyNodeId;
        private Boolean active;
        private Double salary;
        private String contract;
        private String payFrequency;
        private String payBasis;
        private Double fullTimeEquivalent;
        private String changeReason;
        private OffsetDateTime nextIncrementDate;
        private String timesheetLocation;
        private String timesheetLunchDuration;
        private String expenseSubmissionFrequency;
        private String costCentre;
        private String jobFamily;
        private Boolean apprenticeUnder25;
        private OffsetDateTime apprenticeshipEndDate;
        private OffsetDateTime contractEndDate;
        private Double normalHours;
        private String realTimeInformationIrregularFrequency;
        private String noticePeriod;
        private String id;

        private UpdateByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set jobTitle
         * @param jobTitle The title of the Job. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[JobTitle] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set classification
         * @param classification The classification of the Job e.g. Technical, Professional, Managerial. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[Classification] translated through the JOBCLASSIFICATION system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder classification(String classification) {
            this.classification = classification;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The start date of the Job. &lt;br /&gt;  Required. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[SYS_EffectiveDate] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The end date of the Job. &lt;br /&gt;  Automatically Calculated. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[SYS_CalculatedEndDate] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set workingCalendar
         * @param workingCalendar The name of the working calendar of the Job. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[CalendarName] which comes from [ValidWorkingCalendar].[CalendarName] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder workingCalendar(String workingCalendar) {
            this.workingCalendar = workingCalendar;
            return this;
        }
        
        /**
         * Set lineManagerId
         * @param lineManagerId The ID of the Employee that is the line manager for this Job. &lt;br /&gt;  Must exist in Employees Service. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[WorksForEmployeeId] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder lineManagerId(String lineManagerId) {
            this.lineManagerId = lineManagerId;
            return this;
        }
        
        /**
         * Set hierarchyNodeId
         * @param hierarchyNodeId The ID of the Employee&#39;s Hierarchy node of the Job. &lt;br /&gt;  Must exist in Hierarchy Service. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder hierarchyNodeId(String hierarchyNodeId) {
            this.hierarchyNodeId = hierarchyNodeId;
            return this;
        }
        
        /**
         * Set active
         * @param active The Job is currently active. &lt;br /&gt;  Automatically Calculated. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[sys_ActiveJob] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set salary
         * @param salary The salary of the Job. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[BasicPay] (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder salary(Double salary) {
            this.salary = salary;
            return this;
        }
        
        /**
         * Set contract
         * @param contract The contract of the Job e.g. Full Time, Part Time. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ContractType] translated through the EMPLOYMENTTYPES system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder contract(String contract) {
            this.contract = contract;
            return this;
        }
        
        /**
         * Set payFrequency
         * @param payFrequency How often the Job&#39;s salary will be paid e.g. Monthly, Weekly. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[PayFrequency] translated through the PAY FREQ system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder payFrequency(String payFrequency) {
            this.payFrequency = payFrequency;
            return this;
        }
        
        /**
         * Set payBasis
         * @param payBasis The unit of measurement the salary is specified against e.g. Yearly, Hourly. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[PayBasis] translated through the PAY BASIS system list. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder payBasis(String payBasis) {
            this.payBasis = payBasis;
            return this;
        }
        
        /**
         * Set fullTimeEquivalent
         * @param fullTimeEquivalent The full-time equivalent to a full time employee&#39;s hours e.g. 1 &#x3D; Full Time, 0.5 &#x3D; Half Hours. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[FTE]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder fullTimeEquivalent(Double fullTimeEquivalent) {
            this.fullTimeEquivalent = fullTimeEquivalent;
            return this;
        }
        
        /**
         * Set changeReason
         * @param changeReason The reason for the change. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[Reason]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder changeReason(String changeReason) {
            this.changeReason = changeReason;
            return this;
        }
        
        /**
         * Set nextIncrementDate
         * @param nextIncrementDate The next increment date.  &lt;br /&gt;  Cascade Source: [EmployeeJobs].[IncrementDate]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder nextIncrementDate(OffsetDateTime nextIncrementDate) {
            this.nextIncrementDate = nextIncrementDate;
            return this;
        }
        
        /**
         * Set timesheetLocation
         * @param timesheetLocation The timesheet location. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[TimesheetLocation]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder timesheetLocation(String timesheetLocation) {
            this.timesheetLocation = timesheetLocation;
            return this;
        }
        
        /**
         * Set timesheetLunchDuration
         * @param timesheetLunchDuration The time set lunch duration. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[LunchDuration]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder timesheetLunchDuration(String timesheetLunchDuration) {
            this.timesheetLunchDuration = timesheetLunchDuration;
            return this;
        }
        
        /**
         * Set expenseSubmissionFrequency
         * @param expenseSubmissionFrequency The expense submission frequency. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ExpenseSubmissionFrequency]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder expenseSubmissionFrequency(String expenseSubmissionFrequency) {
            this.expenseSubmissionFrequency = expenseSubmissionFrequency;
            return this;
        }
        
        /**
         * Set costCentre
         * @param costCentre The cost centre. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[CostCentre]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder costCentre(String costCentre) {
            this.costCentre = costCentre;
            return this;
        }
        
        /**
         * Set jobFamily
         * @param jobFamily The job family. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[JobFamily]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder jobFamily(String jobFamily) {
            this.jobFamily = jobFamily;
            return this;
        }
        
        /**
         * Set apprenticeUnder25
         * @param apprenticeUnder25 The flag to indicate if the employee is an apprentice under 25. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ApprenticeUnder25]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder apprenticeUnder25(Boolean apprenticeUnder25) {
            this.apprenticeUnder25 = apprenticeUnder25;
            return this;
        }
        
        /**
         * Set apprenticeshipEndDate
         * @param apprenticeshipEndDate The end date of the apprenticeship. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ApprenticeshipEndDate]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder apprenticeshipEndDate(OffsetDateTime apprenticeshipEndDate) {
            this.apprenticeshipEndDate = apprenticeshipEndDate;
            return this;
        }
        
        /**
         * Set contractEndDate
         * @param contractEndDate The end date of the contract. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ContractEndDate]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder contractEndDate(OffsetDateTime contractEndDate) {
            this.contractEndDate = contractEndDate;
            return this;
        }
        
        /**
         * Set normalHours
         * @param normalHours Normal hours. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[NormalHours]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder normalHours(Double normalHours) {
            this.normalHours = normalHours;
            return this;
        }
        
        /**
         * Set realTimeInformationIrregularFrequency
         * @param realTimeInformationIrregularFrequency The real time information of irregular frequency. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[RTIIrregularFrequency]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder realTimeInformationIrregularFrequency(String realTimeInformationIrregularFrequency) {
            this.realTimeInformationIrregularFrequency = realTimeInformationIrregularFrequency;
            return this;
        }
        
        /**
         * Set noticePeriod
         * @param noticePeriod The notice period. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[NoticePeriod]. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder noticePeriod(String noticePeriod) {
            this.noticePeriod = noticePeriod;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the Job to update. &lt;br /&gt;  Must exist in the Jobs Service. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateJobCommand updateJobCommand = buildBodyParams();
            return updateByIdCall(id, updateJobCommand, _callback);
        }

        private UpdateJobCommand buildBodyParams() {
            UpdateJobCommand updateJobCommand = new UpdateJobCommand();
            updateJobCommand.jobTitle(this.jobTitle);
            updateJobCommand.classification(this.classification);
            updateJobCommand.startDate(this.startDate);
            updateJobCommand.endDate(this.endDate);
            updateJobCommand.workingCalendar(this.workingCalendar);
            updateJobCommand.lineManagerId(this.lineManagerId);
            updateJobCommand.hierarchyNodeId(this.hierarchyNodeId);
            updateJobCommand.active(this.active);
            updateJobCommand.salary(this.salary);
            updateJobCommand.contract(this.contract);
            updateJobCommand.payFrequency(this.payFrequency);
            updateJobCommand.payBasis(this.payBasis);
            updateJobCommand.fullTimeEquivalent(this.fullTimeEquivalent);
            updateJobCommand.changeReason(this.changeReason);
            updateJobCommand.nextIncrementDate(this.nextIncrementDate);
            updateJobCommand.timesheetLocation(this.timesheetLocation);
            updateJobCommand.timesheetLunchDuration(this.timesheetLunchDuration);
            updateJobCommand.expenseSubmissionFrequency(this.expenseSubmissionFrequency);
            updateJobCommand.costCentre(this.costCentre);
            updateJobCommand.jobFamily(this.jobFamily);
            updateJobCommand.apprenticeUnder25(this.apprenticeUnder25);
            updateJobCommand.apprenticeshipEndDate(this.apprenticeshipEndDate);
            updateJobCommand.contractEndDate(this.contractEndDate);
            updateJobCommand.normalHours(this.normalHours);
            updateJobCommand.realTimeInformationIrregularFrequency(this.realTimeInformationIrregularFrequency);
            updateJobCommand.noticePeriod(this.noticePeriod);
            updateJobCommand.id(this.id);
            return updateJobCommand;
        }

        /**
         * Execute updateById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateJobCommand updateJobCommand = buildBodyParams();
            updateByIdWithHttpInfo(id, updateJobCommand);
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateJobCommand updateJobCommand = buildBodyParams();
            return updateByIdWithHttpInfo(id, updateJobCommand);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateJobCommand updateJobCommand = buildBodyParams();
            return updateByIdAsync(id, updateJobCommand, _callback);
        }
    }

    /**
     * Update a Job referenced by an ID.
     * 
     * @param id The ID of the Job to update. (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateByIdRequestBuilder(id);
    }
}
