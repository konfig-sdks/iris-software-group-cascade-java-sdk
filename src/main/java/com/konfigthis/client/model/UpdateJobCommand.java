/*
 * HR API
 * <a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>
 *
 * The version of the OpenAPI document: 2
 * Contact: hrapi@iris.co.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UpdateJobCommand
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UpdateJobCommand {
  public static final String SERIALIZED_NAME_JOB_TITLE = "JobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "Classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private String classification;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_WORKING_CALENDAR = "WorkingCalendar";
  @SerializedName(SERIALIZED_NAME_WORKING_CALENDAR)
  private String workingCalendar;

  public static final String SERIALIZED_NAME_LINE_MANAGER_ID = "LineManagerId";
  @SerializedName(SERIALIZED_NAME_LINE_MANAGER_ID)
  private String lineManagerId;

  public static final String SERIALIZED_NAME_HIERARCHY_NODE_ID = "HierarchyNodeId";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_NODE_ID)
  private String hierarchyNodeId;

  public static final String SERIALIZED_NAME_ACTIVE = "Active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_SALARY = "Salary";
  @SerializedName(SERIALIZED_NAME_SALARY)
  private Double salary;

  public static final String SERIALIZED_NAME_CONTRACT = "Contract";
  @SerializedName(SERIALIZED_NAME_CONTRACT)
  private String contract;

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "PayFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private String payFrequency;

  public static final String SERIALIZED_NAME_PAY_BASIS = "PayBasis";
  @SerializedName(SERIALIZED_NAME_PAY_BASIS)
  private String payBasis;

  public static final String SERIALIZED_NAME_FULL_TIME_EQUIVALENT = "FullTimeEquivalent";
  @SerializedName(SERIALIZED_NAME_FULL_TIME_EQUIVALENT)
  private Double fullTimeEquivalent;

  public static final String SERIALIZED_NAME_CHANGE_REASON = "ChangeReason";
  @SerializedName(SERIALIZED_NAME_CHANGE_REASON)
  private String changeReason;

  public static final String SERIALIZED_NAME_NEXT_INCREMENT_DATE = "NextIncrementDate";
  @SerializedName(SERIALIZED_NAME_NEXT_INCREMENT_DATE)
  private OffsetDateTime nextIncrementDate;

  public static final String SERIALIZED_NAME_TIMESHEET_LOCATION = "TimesheetLocation";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_LOCATION)
  private String timesheetLocation;

  public static final String SERIALIZED_NAME_TIMESHEET_LUNCH_DURATION = "TimesheetLunchDuration";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_LUNCH_DURATION)
  private String timesheetLunchDuration;

  public static final String SERIALIZED_NAME_EXPENSE_SUBMISSION_FREQUENCY = "ExpenseSubmissionFrequency";
  @SerializedName(SERIALIZED_NAME_EXPENSE_SUBMISSION_FREQUENCY)
  private String expenseSubmissionFrequency;

  public static final String SERIALIZED_NAME_COST_CENTRE = "CostCentre";
  @SerializedName(SERIALIZED_NAME_COST_CENTRE)
  private String costCentre;

  public static final String SERIALIZED_NAME_JOB_FAMILY = "JobFamily";
  @SerializedName(SERIALIZED_NAME_JOB_FAMILY)
  private String jobFamily;

  public static final String SERIALIZED_NAME_APPRENTICE_UNDER25 = "ApprenticeUnder25";
  @SerializedName(SERIALIZED_NAME_APPRENTICE_UNDER25)
  private Boolean apprenticeUnder25;

  public static final String SERIALIZED_NAME_APPRENTICESHIP_END_DATE = "ApprenticeshipEndDate";
  @SerializedName(SERIALIZED_NAME_APPRENTICESHIP_END_DATE)
  private OffsetDateTime apprenticeshipEndDate;

  public static final String SERIALIZED_NAME_CONTRACT_END_DATE = "ContractEndDate";
  @SerializedName(SERIALIZED_NAME_CONTRACT_END_DATE)
  private OffsetDateTime contractEndDate;

  public static final String SERIALIZED_NAME_NORMAL_HOURS = "NormalHours";
  @SerializedName(SERIALIZED_NAME_NORMAL_HOURS)
  private Double normalHours;

  public static final String SERIALIZED_NAME_REAL_TIME_INFORMATION_IRREGULAR_FREQUENCY = "RealTimeInformationIrregularFrequency";
  @SerializedName(SERIALIZED_NAME_REAL_TIME_INFORMATION_IRREGULAR_FREQUENCY)
  private String realTimeInformationIrregularFrequency;

  public static final String SERIALIZED_NAME_NOTICE_PERIOD = "NoticePeriod";
  @SerializedName(SERIALIZED_NAME_NOTICE_PERIOD)
  private String noticePeriod;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public UpdateJobCommand() {
  }

  public UpdateJobCommand jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * The title of the Job. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[JobTitle]
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The title of the Job. <br />  Cascade Source: [EmployeeJobs].[JobTitle]")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public UpdateJobCommand classification(String classification) {
    
    
    
    
    this.classification = classification;
    return this;
  }

   /**
   * The classification of the Job e.g. Technical, Professional, Managerial. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[Classification] translated through the JOBCLASSIFICATION system list.
   * @return classification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The classification of the Job e.g. Technical, Professional, Managerial. <br />  Cascade Source: [EmployeeJobs].[Classification] translated through the JOBCLASSIFICATION system list.")

  public String getClassification() {
    return classification;
  }


  public void setClassification(String classification) {
    
    
    
    this.classification = classification;
  }


  public UpdateJobCommand startDate(OffsetDateTime startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date of the Job. &lt;br /&gt;  Required. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[SYS_EffectiveDate]
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The start date of the Job. <br />  Required. <br />  Cascade Source: [EmployeeJobs].[SYS_EffectiveDate]")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    
    
    
    this.startDate = startDate;
  }


  public UpdateJobCommand endDate(OffsetDateTime endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The end date of the Job. &lt;br /&gt;  Automatically Calculated. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[SYS_CalculatedEndDate]
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The end date of the Job. <br />  Automatically Calculated. <br />  Cascade Source: [EmployeeJobs].[SYS_CalculatedEndDate]")

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    
    
    
    this.endDate = endDate;
  }


  public UpdateJobCommand workingCalendar(String workingCalendar) {
    
    
    
    
    this.workingCalendar = workingCalendar;
    return this;
  }

   /**
   * The name of the working calendar of the Job. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[CalendarName] which comes from [ValidWorkingCalendar].[CalendarName]
   * @return workingCalendar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the working calendar of the Job. <br />  Cascade Source: [EmployeeJobs].[CalendarName] which comes from [ValidWorkingCalendar].[CalendarName]")

  public String getWorkingCalendar() {
    return workingCalendar;
  }


  public void setWorkingCalendar(String workingCalendar) {
    
    
    
    this.workingCalendar = workingCalendar;
  }


  public UpdateJobCommand lineManagerId(String lineManagerId) {
    
    
    
    
    this.lineManagerId = lineManagerId;
    return this;
  }

   /**
   * The ID of the Employee that is the line manager for this Job. &lt;br /&gt;  Must exist in Employees Service. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[WorksForEmployeeId]
   * @return lineManagerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the Employee that is the line manager for this Job. <br />  Must exist in Employees Service. <br />  Cascade Source: [EmployeeJobs].[WorksForEmployeeId]")

  public String getLineManagerId() {
    return lineManagerId;
  }


  public void setLineManagerId(String lineManagerId) {
    
    
    
    this.lineManagerId = lineManagerId;
  }


  public UpdateJobCommand hierarchyNodeId(String hierarchyNodeId) {
    
    
    
    
    this.hierarchyNodeId = hierarchyNodeId;
    return this;
  }

   /**
   * The ID of the Employee&#39;s Hierarchy node of the Job. &lt;br /&gt;  Must exist in Hierarchy Service.
   * @return hierarchyNodeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the Employee's Hierarchy node of the Job. <br />  Must exist in Hierarchy Service.")

  public String getHierarchyNodeId() {
    return hierarchyNodeId;
  }


  public void setHierarchyNodeId(String hierarchyNodeId) {
    
    
    
    this.hierarchyNodeId = hierarchyNodeId;
  }


  public UpdateJobCommand active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * The Job is currently active. &lt;br /&gt;  Automatically Calculated. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[sys_ActiveJob]
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Job is currently active. <br />  Automatically Calculated. <br />  Cascade Source: [EmployeeJobs].[sys_ActiveJob]")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public UpdateJobCommand salary(Double salary) {
    
    
    
    
    this.salary = salary;
    return this;
  }

   /**
   * The salary of the Job. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[BasicPay]
   * @return salary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The salary of the Job. <br />  Cascade Source: [EmployeeJobs].[BasicPay]")

  public Double getSalary() {
    return salary;
  }


  public void setSalary(Double salary) {
    
    
    
    this.salary = salary;
  }


  public UpdateJobCommand contract(String contract) {
    
    
    
    
    this.contract = contract;
    return this;
  }

   /**
   * The contract of the Job e.g. Full Time, Part Time. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ContractType] translated through the EMPLOYMENTTYPES system list.
   * @return contract
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The contract of the Job e.g. Full Time, Part Time. <br />  Cascade Source: [EmployeeJobs].[ContractType] translated through the EMPLOYMENTTYPES system list.")

  public String getContract() {
    return contract;
  }


  public void setContract(String contract) {
    
    
    
    this.contract = contract;
  }


  public UpdateJobCommand payFrequency(String payFrequency) {
    
    
    
    
    this.payFrequency = payFrequency;
    return this;
  }

   /**
   * How often the Job&#39;s salary will be paid e.g. Monthly, Weekly. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[PayFrequency] translated through the PAY FREQ system list.
   * @return payFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How often the Job's salary will be paid e.g. Monthly, Weekly. <br />  Cascade Source: [EmployeeJobs].[PayFrequency] translated through the PAY FREQ system list.")

  public String getPayFrequency() {
    return payFrequency;
  }


  public void setPayFrequency(String payFrequency) {
    
    
    
    this.payFrequency = payFrequency;
  }


  public UpdateJobCommand payBasis(String payBasis) {
    
    
    
    
    this.payBasis = payBasis;
    return this;
  }

   /**
   * The unit of measurement the salary is specified against e.g. Yearly, Hourly. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[PayBasis] translated through the PAY BASIS system list.
   * @return payBasis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unit of measurement the salary is specified against e.g. Yearly, Hourly. <br />  Cascade Source: [EmployeeJobs].[PayBasis] translated through the PAY BASIS system list.")

  public String getPayBasis() {
    return payBasis;
  }


  public void setPayBasis(String payBasis) {
    
    
    
    this.payBasis = payBasis;
  }


  public UpdateJobCommand fullTimeEquivalent(Double fullTimeEquivalent) {
    
    
    
    
    this.fullTimeEquivalent = fullTimeEquivalent;
    return this;
  }

   /**
   * The full-time equivalent to a full time employee&#39;s hours e.g. 1 &#x3D; Full Time, 0.5 &#x3D; Half Hours. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[FTE].
   * @return fullTimeEquivalent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The full-time equivalent to a full time employee's hours e.g. 1 = Full Time, 0.5 = Half Hours. <br />  Cascade Source: [EmployeeJobs].[FTE].")

  public Double getFullTimeEquivalent() {
    return fullTimeEquivalent;
  }


  public void setFullTimeEquivalent(Double fullTimeEquivalent) {
    
    
    
    this.fullTimeEquivalent = fullTimeEquivalent;
  }


  public UpdateJobCommand changeReason(String changeReason) {
    
    
    
    
    this.changeReason = changeReason;
    return this;
  }

   /**
   * The reason for the change. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[Reason].
   * @return changeReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reason for the change. <br />  Cascade Source: [EmployeeJobs].[Reason].")

  public String getChangeReason() {
    return changeReason;
  }


  public void setChangeReason(String changeReason) {
    
    
    
    this.changeReason = changeReason;
  }


  public UpdateJobCommand nextIncrementDate(OffsetDateTime nextIncrementDate) {
    
    
    
    
    this.nextIncrementDate = nextIncrementDate;
    return this;
  }

   /**
   * The next increment date.  &lt;br /&gt;  Cascade Source: [EmployeeJobs].[IncrementDate].
   * @return nextIncrementDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The next increment date.  <br />  Cascade Source: [EmployeeJobs].[IncrementDate].")

  public OffsetDateTime getNextIncrementDate() {
    return nextIncrementDate;
  }


  public void setNextIncrementDate(OffsetDateTime nextIncrementDate) {
    
    
    
    this.nextIncrementDate = nextIncrementDate;
  }


  public UpdateJobCommand timesheetLocation(String timesheetLocation) {
    
    
    
    
    this.timesheetLocation = timesheetLocation;
    return this;
  }

   /**
   * The timesheet location. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[TimesheetLocation].
   * @return timesheetLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timesheet location. <br />  Cascade Source: [EmployeeJobs].[TimesheetLocation].")

  public String getTimesheetLocation() {
    return timesheetLocation;
  }


  public void setTimesheetLocation(String timesheetLocation) {
    
    
    
    this.timesheetLocation = timesheetLocation;
  }


  public UpdateJobCommand timesheetLunchDuration(String timesheetLunchDuration) {
    
    
    
    
    this.timesheetLunchDuration = timesheetLunchDuration;
    return this;
  }

   /**
   * The time set lunch duration. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[LunchDuration].
   * @return timesheetLunchDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time set lunch duration. <br />  Cascade Source: [EmployeeJobs].[LunchDuration].")

  public String getTimesheetLunchDuration() {
    return timesheetLunchDuration;
  }


  public void setTimesheetLunchDuration(String timesheetLunchDuration) {
    
    
    
    this.timesheetLunchDuration = timesheetLunchDuration;
  }


  public UpdateJobCommand expenseSubmissionFrequency(String expenseSubmissionFrequency) {
    
    
    
    
    this.expenseSubmissionFrequency = expenseSubmissionFrequency;
    return this;
  }

   /**
   * The expense submission frequency. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ExpenseSubmissionFrequency].
   * @return expenseSubmissionFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The expense submission frequency. <br />  Cascade Source: [EmployeeJobs].[ExpenseSubmissionFrequency].")

  public String getExpenseSubmissionFrequency() {
    return expenseSubmissionFrequency;
  }


  public void setExpenseSubmissionFrequency(String expenseSubmissionFrequency) {
    
    
    
    this.expenseSubmissionFrequency = expenseSubmissionFrequency;
  }


  public UpdateJobCommand costCentre(String costCentre) {
    
    
    
    
    this.costCentre = costCentre;
    return this;
  }

   /**
   * The cost centre. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[CostCentre].
   * @return costCentre
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cost centre. <br />  Cascade Source: [EmployeeJobs].[CostCentre].")

  public String getCostCentre() {
    return costCentre;
  }


  public void setCostCentre(String costCentre) {
    
    
    
    this.costCentre = costCentre;
  }


  public UpdateJobCommand jobFamily(String jobFamily) {
    
    
    
    
    this.jobFamily = jobFamily;
    return this;
  }

   /**
   * The job family. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[JobFamily].
   * @return jobFamily
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The job family. <br />  Cascade Source: [EmployeeJobs].[JobFamily].")

  public String getJobFamily() {
    return jobFamily;
  }


  public void setJobFamily(String jobFamily) {
    
    
    
    this.jobFamily = jobFamily;
  }


  public UpdateJobCommand apprenticeUnder25(Boolean apprenticeUnder25) {
    
    
    
    
    this.apprenticeUnder25 = apprenticeUnder25;
    return this;
  }

   /**
   * The flag to indicate if the employee is an apprentice under 25. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ApprenticeUnder25].
   * @return apprenticeUnder25
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The flag to indicate if the employee is an apprentice under 25. <br />  Cascade Source: [EmployeeJobs].[ApprenticeUnder25].")

  public Boolean getApprenticeUnder25() {
    return apprenticeUnder25;
  }


  public void setApprenticeUnder25(Boolean apprenticeUnder25) {
    
    
    
    this.apprenticeUnder25 = apprenticeUnder25;
  }


  public UpdateJobCommand apprenticeshipEndDate(OffsetDateTime apprenticeshipEndDate) {
    
    
    
    
    this.apprenticeshipEndDate = apprenticeshipEndDate;
    return this;
  }

   /**
   * The end date of the apprenticeship. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ApprenticeshipEndDate].
   * @return apprenticeshipEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The end date of the apprenticeship. <br />  Cascade Source: [EmployeeJobs].[ApprenticeshipEndDate].")

  public OffsetDateTime getApprenticeshipEndDate() {
    return apprenticeshipEndDate;
  }


  public void setApprenticeshipEndDate(OffsetDateTime apprenticeshipEndDate) {
    
    
    
    this.apprenticeshipEndDate = apprenticeshipEndDate;
  }


  public UpdateJobCommand contractEndDate(OffsetDateTime contractEndDate) {
    
    
    
    
    this.contractEndDate = contractEndDate;
    return this;
  }

   /**
   * The end date of the contract. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[ContractEndDate].
   * @return contractEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The end date of the contract. <br />  Cascade Source: [EmployeeJobs].[ContractEndDate].")

  public OffsetDateTime getContractEndDate() {
    return contractEndDate;
  }


  public void setContractEndDate(OffsetDateTime contractEndDate) {
    
    
    
    this.contractEndDate = contractEndDate;
  }


  public UpdateJobCommand normalHours(Double normalHours) {
    
    
    
    
    this.normalHours = normalHours;
    return this;
  }

   /**
   * Normal hours. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[NormalHours].
   * @return normalHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Normal hours. <br />  Cascade Source: [EmployeeJobs].[NormalHours].")

  public Double getNormalHours() {
    return normalHours;
  }


  public void setNormalHours(Double normalHours) {
    
    
    
    this.normalHours = normalHours;
  }


  public UpdateJobCommand realTimeInformationIrregularFrequency(String realTimeInformationIrregularFrequency) {
    
    
    
    
    this.realTimeInformationIrregularFrequency = realTimeInformationIrregularFrequency;
    return this;
  }

   /**
   * The real time information of irregular frequency. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[RTIIrregularFrequency].
   * @return realTimeInformationIrregularFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The real time information of irregular frequency. <br />  Cascade Source: [EmployeeJobs].[RTIIrregularFrequency].")

  public String getRealTimeInformationIrregularFrequency() {
    return realTimeInformationIrregularFrequency;
  }


  public void setRealTimeInformationIrregularFrequency(String realTimeInformationIrregularFrequency) {
    
    
    
    this.realTimeInformationIrregularFrequency = realTimeInformationIrregularFrequency;
  }


  public UpdateJobCommand noticePeriod(String noticePeriod) {
    
    
    
    
    this.noticePeriod = noticePeriod;
    return this;
  }

   /**
   * The notice period. &lt;br /&gt;  Cascade Source: [EmployeeJobs].[NoticePeriod].
   * @return noticePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The notice period. <br />  Cascade Source: [EmployeeJobs].[NoticePeriod].")

  public String getNoticePeriod() {
    return noticePeriod;
  }


  public void setNoticePeriod(String noticePeriod) {
    
    
    
    this.noticePeriod = noticePeriod;
  }


  public UpdateJobCommand id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the Job to update. &lt;br /&gt;  Must exist in the Jobs Service.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the Job to update. <br />  Must exist in the Jobs Service.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UpdateJobCommand instance itself
   */
  public UpdateJobCommand putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateJobCommand updateJobCommand = (UpdateJobCommand) o;
    return Objects.equals(this.jobTitle, updateJobCommand.jobTitle) &&
        Objects.equals(this.classification, updateJobCommand.classification) &&
        Objects.equals(this.startDate, updateJobCommand.startDate) &&
        Objects.equals(this.endDate, updateJobCommand.endDate) &&
        Objects.equals(this.workingCalendar, updateJobCommand.workingCalendar) &&
        Objects.equals(this.lineManagerId, updateJobCommand.lineManagerId) &&
        Objects.equals(this.hierarchyNodeId, updateJobCommand.hierarchyNodeId) &&
        Objects.equals(this.active, updateJobCommand.active) &&
        Objects.equals(this.salary, updateJobCommand.salary) &&
        Objects.equals(this.contract, updateJobCommand.contract) &&
        Objects.equals(this.payFrequency, updateJobCommand.payFrequency) &&
        Objects.equals(this.payBasis, updateJobCommand.payBasis) &&
        Objects.equals(this.fullTimeEquivalent, updateJobCommand.fullTimeEquivalent) &&
        Objects.equals(this.changeReason, updateJobCommand.changeReason) &&
        Objects.equals(this.nextIncrementDate, updateJobCommand.nextIncrementDate) &&
        Objects.equals(this.timesheetLocation, updateJobCommand.timesheetLocation) &&
        Objects.equals(this.timesheetLunchDuration, updateJobCommand.timesheetLunchDuration) &&
        Objects.equals(this.expenseSubmissionFrequency, updateJobCommand.expenseSubmissionFrequency) &&
        Objects.equals(this.costCentre, updateJobCommand.costCentre) &&
        Objects.equals(this.jobFamily, updateJobCommand.jobFamily) &&
        Objects.equals(this.apprenticeUnder25, updateJobCommand.apprenticeUnder25) &&
        Objects.equals(this.apprenticeshipEndDate, updateJobCommand.apprenticeshipEndDate) &&
        Objects.equals(this.contractEndDate, updateJobCommand.contractEndDate) &&
        Objects.equals(this.normalHours, updateJobCommand.normalHours) &&
        Objects.equals(this.realTimeInformationIrregularFrequency, updateJobCommand.realTimeInformationIrregularFrequency) &&
        Objects.equals(this.noticePeriod, updateJobCommand.noticePeriod) &&
        Objects.equals(this.id, updateJobCommand.id)&&
        Objects.equals(this.additionalProperties, updateJobCommand.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobTitle, classification, startDate, endDate, workingCalendar, lineManagerId, hierarchyNodeId, active, salary, contract, payFrequency, payBasis, fullTimeEquivalent, changeReason, nextIncrementDate, timesheetLocation, timesheetLunchDuration, expenseSubmissionFrequency, costCentre, jobFamily, apprenticeUnder25, apprenticeshipEndDate, contractEndDate, normalHours, realTimeInformationIrregularFrequency, noticePeriod, id, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateJobCommand {\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    workingCalendar: ").append(toIndentedString(workingCalendar)).append("\n");
    sb.append("    lineManagerId: ").append(toIndentedString(lineManagerId)).append("\n");
    sb.append("    hierarchyNodeId: ").append(toIndentedString(hierarchyNodeId)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    salary: ").append(toIndentedString(salary)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    payBasis: ").append(toIndentedString(payBasis)).append("\n");
    sb.append("    fullTimeEquivalent: ").append(toIndentedString(fullTimeEquivalent)).append("\n");
    sb.append("    changeReason: ").append(toIndentedString(changeReason)).append("\n");
    sb.append("    nextIncrementDate: ").append(toIndentedString(nextIncrementDate)).append("\n");
    sb.append("    timesheetLocation: ").append(toIndentedString(timesheetLocation)).append("\n");
    sb.append("    timesheetLunchDuration: ").append(toIndentedString(timesheetLunchDuration)).append("\n");
    sb.append("    expenseSubmissionFrequency: ").append(toIndentedString(expenseSubmissionFrequency)).append("\n");
    sb.append("    costCentre: ").append(toIndentedString(costCentre)).append("\n");
    sb.append("    jobFamily: ").append(toIndentedString(jobFamily)).append("\n");
    sb.append("    apprenticeUnder25: ").append(toIndentedString(apprenticeUnder25)).append("\n");
    sb.append("    apprenticeshipEndDate: ").append(toIndentedString(apprenticeshipEndDate)).append("\n");
    sb.append("    contractEndDate: ").append(toIndentedString(contractEndDate)).append("\n");
    sb.append("    normalHours: ").append(toIndentedString(normalHours)).append("\n");
    sb.append("    realTimeInformationIrregularFrequency: ").append(toIndentedString(realTimeInformationIrregularFrequency)).append("\n");
    sb.append("    noticePeriod: ").append(toIndentedString(noticePeriod)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobTitle");
    openapiFields.add("Classification");
    openapiFields.add("StartDate");
    openapiFields.add("EndDate");
    openapiFields.add("WorkingCalendar");
    openapiFields.add("LineManagerId");
    openapiFields.add("HierarchyNodeId");
    openapiFields.add("Active");
    openapiFields.add("Salary");
    openapiFields.add("Contract");
    openapiFields.add("PayFrequency");
    openapiFields.add("PayBasis");
    openapiFields.add("FullTimeEquivalent");
    openapiFields.add("ChangeReason");
    openapiFields.add("NextIncrementDate");
    openapiFields.add("TimesheetLocation");
    openapiFields.add("TimesheetLunchDuration");
    openapiFields.add("ExpenseSubmissionFrequency");
    openapiFields.add("CostCentre");
    openapiFields.add("JobFamily");
    openapiFields.add("ApprenticeUnder25");
    openapiFields.add("ApprenticeshipEndDate");
    openapiFields.add("ContractEndDate");
    openapiFields.add("NormalHours");
    openapiFields.add("RealTimeInformationIrregularFrequency");
    openapiFields.add("NoticePeriod");
    openapiFields.add("Id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateJobCommand
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateJobCommand.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateJobCommand is not found in the empty JSON string", UpdateJobCommand.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("JobTitle").isJsonNull() && (jsonObj.get("JobTitle") != null && !jsonObj.get("JobTitle").isJsonNull()) && !jsonObj.get("JobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobTitle").toString()));
      }
      if (!jsonObj.get("Classification").isJsonNull() && (jsonObj.get("Classification") != null && !jsonObj.get("Classification").isJsonNull()) && !jsonObj.get("Classification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Classification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Classification").toString()));
      }
      if (!jsonObj.get("WorkingCalendar").isJsonNull() && (jsonObj.get("WorkingCalendar") != null && !jsonObj.get("WorkingCalendar").isJsonNull()) && !jsonObj.get("WorkingCalendar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkingCalendar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkingCalendar").toString()));
      }
      if (!jsonObj.get("LineManagerId").isJsonNull() && (jsonObj.get("LineManagerId") != null && !jsonObj.get("LineManagerId").isJsonNull()) && !jsonObj.get("LineManagerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LineManagerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LineManagerId").toString()));
      }
      if (!jsonObj.get("HierarchyNodeId").isJsonNull() && (jsonObj.get("HierarchyNodeId") != null && !jsonObj.get("HierarchyNodeId").isJsonNull()) && !jsonObj.get("HierarchyNodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HierarchyNodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HierarchyNodeId").toString()));
      }
      if (!jsonObj.get("Contract").isJsonNull() && (jsonObj.get("Contract") != null && !jsonObj.get("Contract").isJsonNull()) && !jsonObj.get("Contract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Contract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Contract").toString()));
      }
      if (!jsonObj.get("PayFrequency").isJsonNull() && (jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) && !jsonObj.get("PayFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayFrequency").toString()));
      }
      if (!jsonObj.get("PayBasis").isJsonNull() && (jsonObj.get("PayBasis") != null && !jsonObj.get("PayBasis").isJsonNull()) && !jsonObj.get("PayBasis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayBasis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayBasis").toString()));
      }
      if (!jsonObj.get("ChangeReason").isJsonNull() && (jsonObj.get("ChangeReason") != null && !jsonObj.get("ChangeReason").isJsonNull()) && !jsonObj.get("ChangeReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChangeReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChangeReason").toString()));
      }
      if (!jsonObj.get("TimesheetLocation").isJsonNull() && (jsonObj.get("TimesheetLocation") != null && !jsonObj.get("TimesheetLocation").isJsonNull()) && !jsonObj.get("TimesheetLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimesheetLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimesheetLocation").toString()));
      }
      if (!jsonObj.get("TimesheetLunchDuration").isJsonNull() && (jsonObj.get("TimesheetLunchDuration") != null && !jsonObj.get("TimesheetLunchDuration").isJsonNull()) && !jsonObj.get("TimesheetLunchDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimesheetLunchDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimesheetLunchDuration").toString()));
      }
      if (!jsonObj.get("ExpenseSubmissionFrequency").isJsonNull() && (jsonObj.get("ExpenseSubmissionFrequency") != null && !jsonObj.get("ExpenseSubmissionFrequency").isJsonNull()) && !jsonObj.get("ExpenseSubmissionFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpenseSubmissionFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpenseSubmissionFrequency").toString()));
      }
      if (!jsonObj.get("CostCentre").isJsonNull() && (jsonObj.get("CostCentre") != null && !jsonObj.get("CostCentre").isJsonNull()) && !jsonObj.get("CostCentre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CostCentre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CostCentre").toString()));
      }
      if (!jsonObj.get("JobFamily").isJsonNull() && (jsonObj.get("JobFamily") != null && !jsonObj.get("JobFamily").isJsonNull()) && !jsonObj.get("JobFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobFamily").toString()));
      }
      if (!jsonObj.get("RealTimeInformationIrregularFrequency").isJsonNull() && (jsonObj.get("RealTimeInformationIrregularFrequency") != null && !jsonObj.get("RealTimeInformationIrregularFrequency").isJsonNull()) && !jsonObj.get("RealTimeInformationIrregularFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RealTimeInformationIrregularFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RealTimeInformationIrregularFrequency").toString()));
      }
      if (!jsonObj.get("NoticePeriod").isJsonNull() && (jsonObj.get("NoticePeriod") != null && !jsonObj.get("NoticePeriod").isJsonNull()) && !jsonObj.get("NoticePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NoticePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NoticePeriod").toString()));
      }
      if (!jsonObj.get("Id").isJsonNull() && (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateJobCommand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateJobCommand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateJobCommand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateJobCommand.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateJobCommand>() {
           @Override
           public void write(JsonWriter out, UpdateJobCommand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateJobCommand read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UpdateJobCommand instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateJobCommand given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateJobCommand
  * @throws IOException if the JSON string is invalid with respect to UpdateJobCommand
  */
  public static UpdateJobCommand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateJobCommand.class);
  }

 /**
  * Convert an instance of UpdateJobCommand to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

