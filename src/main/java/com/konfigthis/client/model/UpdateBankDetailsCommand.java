/*
 * HR API
 * <a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>
 *
 * The version of the OpenAPI document: 2
 * Contact: hrapi@iris.co.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BankAddress;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UpdateBankDetailsCommand
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UpdateBankDetailsCommand {
  public static final String SERIALIZED_NAME_BANK_NAME = "BankName";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  public static final String SERIALIZED_NAME_BANK_ADDRESS = "BankAddress";
  @SerializedName(SERIALIZED_NAME_BANK_ADDRESS)
  private BankAddress bankAddress;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "AccountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "AccountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_SORT_CODE = "SortCode";
  @SerializedName(SERIALIZED_NAME_SORT_CODE)
  private String sortCode;

  public static final String SERIALIZED_NAME_ROLL_NUMBER = "RollNumber";
  @SerializedName(SERIALIZED_NAME_ROLL_NUMBER)
  private String rollNumber;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public UpdateBankDetailsCommand() {
  }

  public UpdateBankDetailsCommand bankName(String bankName) {
    
    
    
    
    this.bankName = bankName;
    return this;
  }

   /**
   * Bank Name. &lt;br /&gt;  Cascade Source: [EmployeeBank].[BankName]
   * @return bankName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank Name. <br />  Cascade Source: [EmployeeBank].[BankName]")

  public String getBankName() {
    return bankName;
  }


  public void setBankName(String bankName) {
    
    
    
    this.bankName = bankName;
  }


  public UpdateBankDetailsCommand bankAddress(BankAddress bankAddress) {
    
    
    
    
    this.bankAddress = bankAddress;
    return this;
  }

   /**
   * Get bankAddress
   * @return bankAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BankAddress getBankAddress() {
    return bankAddress;
  }


  public void setBankAddress(BankAddress bankAddress) {
    
    
    
    this.bankAddress = bankAddress;
  }


  public UpdateBankDetailsCommand accountName(String accountName) {
    
    
    
    
    this.accountName = accountName;
    return this;
  }

   /**
   * Account Name. &lt;br /&gt;  Cascade Source: [EmployeeBank].[AccountName]
   * @return accountName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Account Name. <br />  Cascade Source: [EmployeeBank].[AccountName]")

  public String getAccountName() {
    return accountName;
  }


  public void setAccountName(String accountName) {
    
    
    
    this.accountName = accountName;
  }


  public UpdateBankDetailsCommand accountNumber(String accountNumber) {
    
    
    
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Account Number. &lt;br /&gt;  Cascade Source: [EmployeeBank].[AccountNumber]
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Account Number. <br />  Cascade Source: [EmployeeBank].[AccountNumber]")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    
    this.accountNumber = accountNumber;
  }


  public UpdateBankDetailsCommand sortCode(String sortCode) {
    
    
    
    
    this.sortCode = sortCode;
    return this;
  }

   /**
   * Sort Code. &lt;br /&gt;  Cascade Source: [EmployeeBank].[SortCode]
   * @return sortCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sort Code. <br />  Cascade Source: [EmployeeBank].[SortCode]")

  public String getSortCode() {
    return sortCode;
  }


  public void setSortCode(String sortCode) {
    
    
    
    this.sortCode = sortCode;
  }


  public UpdateBankDetailsCommand rollNumber(String rollNumber) {
    
    
    
    
    this.rollNumber = rollNumber;
    return this;
  }

   /**
   * Roll Number. &lt;br /&gt;  Cascade Source: [EmployeeBank].[RollNumber]
   * @return rollNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Roll Number. <br />  Cascade Source: [EmployeeBank].[RollNumber]")

  public String getRollNumber() {
    return rollNumber;
  }


  public void setRollNumber(String rollNumber) {
    
    
    
    this.rollNumber = rollNumber;
  }


  public UpdateBankDetailsCommand id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID of Bank Details to update. &lt;br /&gt;  Must exist in Bank Details Service.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of Bank Details to update. <br />  Must exist in Bank Details Service.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UpdateBankDetailsCommand instance itself
   */
  public UpdateBankDetailsCommand putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateBankDetailsCommand updateBankDetailsCommand = (UpdateBankDetailsCommand) o;
    return Objects.equals(this.bankName, updateBankDetailsCommand.bankName) &&
        Objects.equals(this.bankAddress, updateBankDetailsCommand.bankAddress) &&
        Objects.equals(this.accountName, updateBankDetailsCommand.accountName) &&
        Objects.equals(this.accountNumber, updateBankDetailsCommand.accountNumber) &&
        Objects.equals(this.sortCode, updateBankDetailsCommand.sortCode) &&
        Objects.equals(this.rollNumber, updateBankDetailsCommand.rollNumber) &&
        Objects.equals(this.id, updateBankDetailsCommand.id)&&
        Objects.equals(this.additionalProperties, updateBankDetailsCommand.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankName, bankAddress, accountName, accountNumber, sortCode, rollNumber, id, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateBankDetailsCommand {\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    bankAddress: ").append(toIndentedString(bankAddress)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    sortCode: ").append(toIndentedString(sortCode)).append("\n");
    sb.append("    rollNumber: ").append(toIndentedString(rollNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BankName");
    openapiFields.add("BankAddress");
    openapiFields.add("AccountName");
    openapiFields.add("AccountNumber");
    openapiFields.add("SortCode");
    openapiFields.add("RollNumber");
    openapiFields.add("Id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateBankDetailsCommand
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateBankDetailsCommand.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateBankDetailsCommand is not found in the empty JSON string", UpdateBankDetailsCommand.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("BankName").isJsonNull() && (jsonObj.get("BankName") != null && !jsonObj.get("BankName").isJsonNull()) && !jsonObj.get("BankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BankName").toString()));
      }
      // validate the optional field `BankAddress`
      if (jsonObj.get("BankAddress") != null && !jsonObj.get("BankAddress").isJsonNull()) {
        BankAddress.validateJsonObject(jsonObj.getAsJsonObject("BankAddress"));
      }
      if (!jsonObj.get("AccountName").isJsonNull() && (jsonObj.get("AccountName") != null && !jsonObj.get("AccountName").isJsonNull()) && !jsonObj.get("AccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountName").toString()));
      }
      if (!jsonObj.get("AccountNumber").isJsonNull() && (jsonObj.get("AccountNumber") != null && !jsonObj.get("AccountNumber").isJsonNull()) && !jsonObj.get("AccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountNumber").toString()));
      }
      if (!jsonObj.get("SortCode").isJsonNull() && (jsonObj.get("SortCode") != null && !jsonObj.get("SortCode").isJsonNull()) && !jsonObj.get("SortCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SortCode").toString()));
      }
      if (!jsonObj.get("RollNumber").isJsonNull() && (jsonObj.get("RollNumber") != null && !jsonObj.get("RollNumber").isJsonNull()) && !jsonObj.get("RollNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RollNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RollNumber").toString()));
      }
      if (!jsonObj.get("Id").isJsonNull() && (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateBankDetailsCommand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateBankDetailsCommand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateBankDetailsCommand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateBankDetailsCommand.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateBankDetailsCommand>() {
           @Override
           public void write(JsonWriter out, UpdateBankDetailsCommand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateBankDetailsCommand read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UpdateBankDetailsCommand instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateBankDetailsCommand given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateBankDetailsCommand
  * @throws IOException if the JSON string is invalid with respect to UpdateBankDetailsCommand
  */
  public static UpdateBankDetailsCommand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateBankDetailsCommand.class);
  }

 /**
  * Convert an instance of UpdateBankDetailsCommand to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

