/*
 * HR API
 * <a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>
 *
 * The version of the OpenAPI document: 2
 * Contact: hrapi@iris.co.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Bank Address
 */
@ApiModel(description = "Bank Address")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BankAddress {
  public static final String SERIALIZED_NAME_ADDRESS1 = "Address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "Address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_ADDRESS3 = "Address3";
  @SerializedName(SERIALIZED_NAME_ADDRESS3)
  private String address3;

  public static final String SERIALIZED_NAME_ADDRESS4 = "Address4";
  @SerializedName(SERIALIZED_NAME_ADDRESS4)
  private String address4;

  public static final String SERIALIZED_NAME_POST_CODE = "PostCode";
  @SerializedName(SERIALIZED_NAME_POST_CODE)
  private String postCode;

  public BankAddress() {
  }

  public BankAddress address1(String address1) {
    
    
    
    
    this.address1 = address1;
    return this;
  }

   /**
   * The first line of Bank Address &lt;br /&gt;  Cascade Source: [EmployeeBank].[Address1]
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The first line of Bank Address <br />  Cascade Source: [EmployeeBank].[Address1]")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    
    this.address1 = address1;
  }


  public BankAddress address2(String address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * The second line of Bank Address &lt;br /&gt;  Cascade Source: [EmployeeBank].[Address2]
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The second line of Bank Address <br />  Cascade Source: [EmployeeBank].[Address2]")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    
    this.address2 = address2;
  }


  public BankAddress address3(String address3) {
    
    
    
    
    this.address3 = address3;
    return this;
  }

   /**
   * The third line of Bank Address &lt;br /&gt;  Cascade Source: [EmployeeBank].[Address3]
   * @return address3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The third line of Bank Address <br />  Cascade Source: [EmployeeBank].[Address3]")

  public String getAddress3() {
    return address3;
  }


  public void setAddress3(String address3) {
    
    
    
    this.address3 = address3;
  }


  public BankAddress address4(String address4) {
    
    
    
    
    this.address4 = address4;
    return this;
  }

   /**
   * The fourth line of Bank Address &lt;br /&gt;  Cascade Source: [EmployeeBank].[Address4]
   * @return address4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fourth line of Bank Address <br />  Cascade Source: [EmployeeBank].[Address4]")

  public String getAddress4() {
    return address4;
  }


  public void setAddress4(String address4) {
    
    
    
    this.address4 = address4;
  }


  public BankAddress postCode(String postCode) {
    
    
    
    
    this.postCode = postCode;
    return this;
  }

   /**
   * Post Code of the Bank &lt;br /&gt;  Cascade Source: [EmployeeBank].[Postcode]
   * @return postCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Post Code of the Bank <br />  Cascade Source: [EmployeeBank].[Postcode]")

  public String getPostCode() {
    return postCode;
  }


  public void setPostCode(String postCode) {
    
    
    
    this.postCode = postCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BankAddress instance itself
   */
  public BankAddress putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankAddress bankAddress = (BankAddress) o;
    return Objects.equals(this.address1, bankAddress.address1) &&
        Objects.equals(this.address2, bankAddress.address2) &&
        Objects.equals(this.address3, bankAddress.address3) &&
        Objects.equals(this.address4, bankAddress.address4) &&
        Objects.equals(this.postCode, bankAddress.postCode)&&
        Objects.equals(this.additionalProperties, bankAddress.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, address2, address3, address4, postCode, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankAddress {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    address3: ").append(toIndentedString(address3)).append("\n");
    sb.append("    address4: ").append(toIndentedString(address4)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address1");
    openapiFields.add("Address2");
    openapiFields.add("Address3");
    openapiFields.add("Address4");
    openapiFields.add("PostCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BankAddress
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BankAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankAddress is not found in the empty JSON string", BankAddress.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("Address1").isJsonNull() && (jsonObj.get("Address1") != null && !jsonObj.get("Address1").isJsonNull()) && !jsonObj.get("Address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address1").toString()));
      }
      if (!jsonObj.get("Address2").isJsonNull() && (jsonObj.get("Address2") != null && !jsonObj.get("Address2").isJsonNull()) && !jsonObj.get("Address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address2").toString()));
      }
      if (!jsonObj.get("Address3").isJsonNull() && (jsonObj.get("Address3") != null && !jsonObj.get("Address3").isJsonNull()) && !jsonObj.get("Address3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address3").toString()));
      }
      if (!jsonObj.get("Address4").isJsonNull() && (jsonObj.get("Address4") != null && !jsonObj.get("Address4").isJsonNull()) && !jsonObj.get("Address4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address4").toString()));
      }
      if (!jsonObj.get("PostCode").isJsonNull() && (jsonObj.get("PostCode") != null && !jsonObj.get("PostCode").isJsonNull()) && !jsonObj.get("PostCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PostCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PostCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<BankAddress>() {
           @Override
           public void write(JsonWriter out, BankAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BankAddress read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BankAddress instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BankAddress given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BankAddress
  * @throws IOException if the JSON string is invalid with respect to BankAddress
  */
  public static BankAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankAddress.class);
  }

 /**
  * Convert an instance of BankAddress to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

