/*
 * HR API
 * <a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>
 *
 * The version of the OpenAPI document: 2
 * Contact: hrapi@iris.co.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateJobCommand;
import com.konfigthis.client.model.JobQueryModel;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UpdateJobCommand;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Disabled
public class JobsApiTest {

    private static JobsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new JobsApi(apiClient);
    }

    /**
     * Creates a new Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewJobTest() throws ApiException {
        String jobTitle = null;
        String classification = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String workingCalendar = null;
        String lineManagerId = null;
        String hierarchyNodeId = null;
        Boolean active = null;
        Double salary = null;
        String employeeId = null;
        String contract = null;
        String payFrequency = null;
        String payBasis = null;
        Double fullTimeEquivalent = null;
        String changeReason = null;
        OffsetDateTime nextIncrementDate = null;
        String timesheetLocation = null;
        String timesheetLunchDuration = null;
        String expenseSubmissionFrequency = null;
        String costCentre = null;
        String jobFamily = null;
        Boolean apprenticeUnder25 = null;
        OffsetDateTime apprenticeshipEndDate = null;
        OffsetDateTime contractEndDate = null;
        Double normalHours = null;
        String realTimeInformationIrregularFrequency = null;
        String noticePeriod = null;
        String response = api.createNewJob()
                .jobTitle(jobTitle)
                .classification(classification)
                .startDate(startDate)
                .endDate(endDate)
                .workingCalendar(workingCalendar)
                .lineManagerId(lineManagerId)
                .hierarchyNodeId(hierarchyNodeId)
                .active(active)
                .salary(salary)
                .employeeId(employeeId)
                .contract(contract)
                .payFrequency(payFrequency)
                .payBasis(payBasis)
                .fullTimeEquivalent(fullTimeEquivalent)
                .changeReason(changeReason)
                .nextIncrementDate(nextIncrementDate)
                .timesheetLocation(timesheetLocation)
                .timesheetLunchDuration(timesheetLunchDuration)
                .expenseSubmissionFrequency(expenseSubmissionFrequency)
                .costCentre(costCentre)
                .jobFamily(jobFamily)
                .apprenticeUnder25(apprenticeUnder25)
                .apprenticeshipEndDate(apprenticeshipEndDate)
                .contractEndDate(contractEndDate)
                .normalHours(normalHours)
                .realTimeInformationIrregularFrequency(realTimeInformationIrregularFrequency)
                .noticePeriod(noticePeriod)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets a single Job referenced by an ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        String response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets a list of Jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        Integer $top = null;
        Integer $skip = null;
        String $filter = null;
        List<String> $select = null;
        String $orderby = null;
        Boolean $count = null;
        JobQueryModel response = api.getList()
                .$top($top)
                .$skip($skip)
                .$filter($filter)
                .$select($select)
                .$orderby($orderby)
                .$count($count)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a Job referenced by an ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        String id = null;
        String jobTitle = null;
        String classification = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String workingCalendar = null;
        String lineManagerId = null;
        String hierarchyNodeId = null;
        Boolean active = null;
        Double salary = null;
        String contract = null;
        String payFrequency = null;
        String payBasis = null;
        Double fullTimeEquivalent = null;
        String changeReason = null;
        OffsetDateTime nextIncrementDate = null;
        String timesheetLocation = null;
        String timesheetLunchDuration = null;
        String expenseSubmissionFrequency = null;
        String costCentre = null;
        String jobFamily = null;
        Boolean apprenticeUnder25 = null;
        OffsetDateTime apprenticeshipEndDate = null;
        OffsetDateTime contractEndDate = null;
        Double normalHours = null;
        String realTimeInformationIrregularFrequency = null;
        String noticePeriod = null;
        String id = null;
        api.updateById(id)
                .jobTitle(jobTitle)
                .classification(classification)
                .startDate(startDate)
                .endDate(endDate)
                .workingCalendar(workingCalendar)
                .lineManagerId(lineManagerId)
                .hierarchyNodeId(hierarchyNodeId)
                .active(active)
                .salary(salary)
                .contract(contract)
                .payFrequency(payFrequency)
                .payBasis(payBasis)
                .fullTimeEquivalent(fullTimeEquivalent)
                .changeReason(changeReason)
                .nextIncrementDate(nextIncrementDate)
                .timesheetLocation(timesheetLocation)
                .timesheetLunchDuration(timesheetLunchDuration)
                .expenseSubmissionFrequency(expenseSubmissionFrequency)
                .costCentre(costCentre)
                .jobFamily(jobFamily)
                .apprenticeUnder25(apprenticeUnder25)
                .apprenticeshipEndDate(apprenticeshipEndDate)
                .contractEndDate(contractEndDate)
                .normalHours(normalHours)
                .realTimeInformationIrregularFrequency(realTimeInformationIrregularFrequency)
                .noticePeriod(noticePeriod)
                .id(id)
                .execute();
        // TODO: test validations
    }

}
