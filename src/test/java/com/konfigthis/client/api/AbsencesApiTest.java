/*
 * HR API
 * <a href='swaggerv2.json'>Download Swagger Json in OAS2 Format.</a>
 *
 * The version of the OpenAPI document: 2
 * Contact: hrapi@iris.co.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AbsenceModel;
import com.konfigthis.client.model.AbsenceQueryModel;
import com.konfigthis.client.model.CreateAbsenceCommand;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UpdateAbsenceCommand;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AbsencesApi
 */
@Disabled
public class AbsencesApiTest {

    private static AbsencesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AbsencesApi(apiClient);
    }

    /**
     * Creates a new Absence.
     *
     * ![Beta](https://img.shields.io/badge/Status-Beta-yellow) &lt;b&gt;This API request method is currently in beta testing.&lt;/b&gt; To gain access to use this method, please contact &lt;a href&#x3D;&#39;mailto:hrapi@iris.co.uk&#39;&gt;hrapi@iris.co.uk.&lt;/a&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewAbsenceTest() throws ApiException {
        String employeeId = null;
        String absenceReasonId = null;
        String narrative = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String response = api.createNewAbsence()
                .employeeId(employeeId)
                .absenceReasonId(absenceReasonId)
                .narrative(narrative)
                .startDate(startDate)
                .endDate(endDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an Absence referenced by ID.
     *
     * ![Beta](https://img.shields.io/badge/Status-Beta-yellow) &lt;b&gt;This API request method is currently in beta testing.&lt;/b&gt; To gain access to use this method, please contact &lt;a href&#x3D;&#39;mailto:hrapi@iris.co.uk&#39;&gt;hrapi@iris.co.uk.&lt;/a&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        String id = null;
        api.deleteById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets a single Absence referenced by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        AbsenceModel response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets a list of Absences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        Integer $top = null;
        Integer $skip = null;
        String $filter = null;
        List<String> $select = null;
        String $orderby = null;
        Boolean $count = null;
        AbsenceQueryModel response = api.getList()
                .$top($top)
                .$skip($skip)
                .$filter($filter)
                .$select($select)
                .$orderby($orderby)
                .$count($count)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an Absence referenced by ID.
     *
     * ![Beta](https://img.shields.io/badge/Status-Beta-yellow) &lt;b&gt;This API request method is currently in beta testing.&lt;/b&gt; To gain access to use this method, please contact &lt;a href&#x3D;&#39;mailto:hrapi@iris.co.uk&#39;&gt;hrapi@iris.co.uk.&lt;/a&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        String id = null;
        String narrative = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        api.updateById(id)
                .narrative(narrative)
                .startDate(startDate)
                .endDate(endDate)
                .id(id)
                .execute();
        // TODO: test validations
    }

}
